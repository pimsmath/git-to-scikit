
  var css = require('sheetify')
  var minidocs = require('minidocs')
  var app = minidocs({"title":"git-to-scikit","logo":"pims3.png","contents":[{"depth":1,"name":"Overview","key":"about","link":"/about"},{"depth":1,"name":"Jupyter and Python","key":"2016-07-20-notes","link":"/2016-07-20-notes"},{"depth":1,"name":"Git and Github","key":"2016-07-27-notes","link":"/2016-07-27-notes"},{"depth":1,"name":"Bash, Scrape, Plot","key":"2016-08-03-notes","link":"/2016-08-03-notes"},{"depth":1,"name":"SciPy","key":"2016-08-10-notes","link":"/2016-08-10-notes"},{"depth":1,"name":"Tour of SciKit-Learn","key":"2016-08-17-notes","link":"/2016-08-17-notes"},{"depth":1,"name":"Basic Machine Learning","key":"2016-08-24-notes","link":"/2016-08-24-notes"}],"markdown":"/Users/colliand/code/git-to-scikit/markdown","initial":"about","basedir":"","dir":"/Users/colliand/code/git-to-scikit","routes":{"index":"/","about":"/about/","2016-07-20-notes":"/2016-07-20-notes/","2016-07-27-notes":"/2016-07-27-notes/","2016-08-03-notes":"/2016-08-03-notes/","2016-08-10-notes":"/2016-08-10-notes/","2016-08-17-notes":"/2016-08-17-notes/","2016-08-24-notes":"/2016-08-24-notes/"},"html":{"about":"<h1 id=\"overview\">Overview</h1>\n<p><a href=\"https://github.com/patrickwalls\">Patrick Walls</a> convened and delivered the <a href=\"https://github.com/patrickwalls/ubc-scientific-software-seminar\">UBC Scientific Software Seminar</a> this summer <a href=\"http://www.math.ubc.ca/\">at UBC</a>.</p>\n<p>This is an example site built up from Patrick&#39;s content using <a href=\"https://github.com/freeman-lab/minidocs\"><code>minidocs</code></a> leveraging <a href=\"http://mybinder.org/\">binder</a>. </p>\n<p>All the notebooks: <a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h3 id=\"how-minidocs-works\">how minidocs works</h3>\n<p>I made a folder called <code>git-to-scikit</code> with a subfolder called <code>markdown</code> containing markdown files, and a <code>contents.json</code> file specifying some organizational structure. Then I ran this command in a terminal in the <code>git-to-scikit</code> folder:</p>\n<p><code>minidocs markdown/ -c contents.json -o site -l pims3.png</code></p>\n<p><img src=\"https://wwejubwfy.s3.amazonaws.com/1._bash-2016-08-26-23-15-38.jpg\" alt=\"minidocs\"> </p>\n<h3 id=\"how-binder-works\">how binder works</h3>\n<p>tbd...</p>\n","2016-07-20-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks/2016-07-20-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"july-20-2016\">July 20, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<ol>\n<li>JupyterHub</li>\n<li>Jupyter Notebooks</li>\n<li>Git/GitHub</li>\n</ol>\n<h2 id=\"1-jupyterhub\">1. JupyterHub</h2>\n<p><a href=\"https://pims.jupyter.ca\">JupyterHub</a> is a web service provided by the <a href=\"http://www.pims.math.ca/\">Pacific Institute for the Mathematical Sciences (PIMS)</a> and hosts <a href=\"http://jupyter.org/\">Jupyter</a> notebooks (such as this document itself) for UBC students, fellows and faculty (via CWL login). When you login to JupyterHub, you see your home directory and various tabs to create files and folders, create notebooks, check which processes are running, etc. Essentially, your JupyterHub account is a Linux machine which is running remotely on a server provided by PIMS and you interact with your remote machine via a browser on your local device.</p>\n<h2 id=\"2-jupyter-notebooks\">2. Jupyter Notebooks</h2>\n<p>A <a href=\"https://jupyter.org\">Jupyter notebook</a> is a web application which allows you to write markdown and execute code all in the browser. To get started with a new Jupyter notebook with a Python 3 kernel, click the <code>New</code> tab in the top right corner of the JupyterHub main page and then click <code>Python 3</code>. This will open a notebook in a new tab in your browser.</p>\n<p>Cells in a notebook contain markdown code or Python code depending of the setting in the toolbar. <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> is a markup language simply designed to easily convert to HTML. See this <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">guide</a> for a quick intro to markdown. Here are some examples:</p>\n<hr>\n<p><strong>Headings:</strong> Create headings with hashes <code>#</code>, <code>##</code>, <code>###</code>, etc. For example, in a new markdown cell, type the following:</p>\n<pre><code><span class=\"hljs-comment\">### A Heading for a New Section</span>\n</code></pre><p>and hit <code>Shift + Enter</code> to produce:</p>\n<h3 id=\"a-heading-for-a-new-section\">A Heading for a New Section</h3>\n<hr>\n<p><strong>Links:</strong> Create a link with the syntax <code>[text](url)</code>. For example, in a new markdown cell, type the following:</p>\n<pre><code>[<span class=\"hljs-string\">A Link to GitHub</span>](<span class=\"hljs-link\">https://github.com/</span>)\n</code></pre><p>and hit <code>Shift + Enter</code> to produce:</p>\n<p><a href=\"https://github.com/\">A Link to GitHub</a></p>\n<hr>\n<p><strong>LaTeX:</strong> LaTeX code in a markdown cell will be rendered as LaTeX. For example, in a markdown cell, type:</p>\n<pre><code><span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span>\\int_a^b f(x) \\ dx = F(b) - F(a)<span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span>\n</code></pre><p>and hit <code>Shift + Enter</code> to produce</p>\n<p>$$\\int_a^b f(x) \\ dx = F(b) - F(a)$$</p>\n<hr>\n<p><strong>Lists:</strong> Use asterisks to create unordered lists. For example, in a new markdown cell, type the following:</p>\n<pre><code><span class=\"hljs-bullet\">* </span>Python\n<span class=\"hljs-bullet\">* </span>C++\n<span class=\"hljs-bullet\">* </span>JavaScript\n</code></pre><p>and hit <code>Shift + Enter</code> to produce:</p>\n<ul>\n<li>Python</li>\n<li>C++</li>\n<li>JavaScript</li>\n</ul>\n<hr>\n<p><strong>Images:</strong> Include an image with the syntax <code>![text](url)</code>. For example, in a new markdown cell, type the following:</p>\n<pre><code>![<span class=\"hljs-string\">Python Logo</span>](<span class=\"hljs-link\">https://www.python.org/static/community_logos/python-logo-master-v3-TM.png</span>)\n</code></pre><p>and hit <code>Shift + Enter</code> to produce:</p>\n<p><img src=\"https://www.python.org/static/community_logos/python-logo-master-v3-TM.png\" alt=\"Python Logo\"></p>\n<hr>\n<p><strong>Python Code:</strong> In a new cell, use the toolbar to set the selected cell to <code>Code</code> and type the following:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>):\n    print(n,<span class=\"hljs-string\">\"squared is equal to\"</span>,n**<span class=\"hljs-number\">2</span>)\n</code></pre>\n<p>and hit <code>Shift + Enter</code> to produce the output:</p>\n<pre><code><span class=\"hljs-symbol\">0 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">1 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-symbol\">2 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">3 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">9</span>\n</code></pre><h3 id=\"exercise-2-1-create-a-jupyter-notebook-about-a-project-you-are-working-on\">EXERCISE 2.1: Create a Jupyter notebook about a project you are working on</h3>\n<p>Create a new Jupyter notebook with a Python 3 kernel and write a short description of a project you are working on or interested in. Use markdown cells including text, link, images, headings, lists and LaTeX, and use code cells to execute Python code. Take your time because we&#39;re going to be pushing these notebooks to GitHub in a later exercise.</p>\n<h2 id=\"3-git-github\">3. Git/GitHub</h2>\n<p><a href=\"https://github.com\">GitHub</a> is a website (which is different from <a href=\"https://pims.jupyter.ca/\">JupyterHub</a>) which hosts Git repositories. <a href=\"https://git-scm.com/\">Git</a> is an open source, version control software used to manage and share software projects. We will be using Git and GitHub repeatedly in this seminar and so we won&#39;t explore all the details right now. Rather, we&#39;ll learn the basics and then repeat and build on these topics and commands over the next few weeks.</p>\n<p>A Git repository is a directory (aka folder) which Git is tracking and recording changes â€“ it is very powerful! Using Git and GitHub is a steep learning curve and the following are some helpful resources:</p>\n<ul>\n<li><a href=\"https://help.github.com/\">GitHub Help</a></li>\n<li><a href=\"https://git-scm.com/\">Git documentation</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8oRjP8yj2Wo&amp;list=PLg7s6cbtAD165JTRsXh8ofwRw0PqUnkVH\">GitHub Training on YouTube</a></li>\n</ul>\n<p><strong>Before getting started</strong>, we need to configure your Git seetings on JupyterHub (see <a href=\"https://help.github.com/articles/set-up-git/\">GitHub Help</a>):</p>\n<ul>\n<li>Sign in to you JupyterHub account</li>\n<li>Open a new terminal (by clicking <code>New &gt; Terminal</code> in the top right of the main JupyterHub page)</li>\n<li>In the terminal, enter the commands:<ul>\n<li><code>git config --global user.name &quot;YOUR NAME&quot;</code></li>\n<li><code>git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</code></li>\n</ul>\n</li>\n<li>The email address you enter should match the one you used to setup your GitHub account (this is how GitHub identifies your GitHub account)</li>\n</ul>\n<h3 id=\"exercise-3-1-create-a-repository-on-github\">EXERCISE 3.1: Create a repository on GitHub</h3>\n<p>Create a new repository on GitHub (for the exercises to be completed during the seminar):</p>\n<ul>\n<li>Open a new tab in your browser and sign in to your <a href=\"https://github.com/\">GitHub</a> account</li>\n<li>Click <code>+</code> in the top right corner of your browser window and click <code>New repository</code></li>\n<li>You are navigated to a new page:<ul>\n<li>Enter the repository name <code>ubcs3-exercises</code></li>\n<li>Enter a description of the repository (such as <code>&quot;A collection of exercises completed during the UBC Scientific Software Seminar&quot;</code>)</li>\n<li>Choose to make the repository <code>Public</code></li>\n<li>Choose to initialize the repository with a <code>README.md</code> file</li>\n<li>Click <code>Create repository</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"exercise-3-2-clone-a-github-repository-to-your-jupyterhub-account\">EXERCISE 3.2: Clone a GitHub repository to your JupyterHub account</h3>\n<p>The repository you created in the previous exercise exists only on GitHub. We want to clone that repo to our JupyterHub account so that we can work on the project on JupyterHub, for example, by adding Jupyter notebooks:</p>\n<ul>\n<li>Open a new tab in your browser and sign in to your <a href=\"https://pims.jupyter.ca\">JupyterHub</a> account</li>\n<li>Click <code>New</code> in the top right of the main page and select <code>Terminal</code></li>\n<li>The terminal is where we use <a href=\"https://www.gnu.org/software/bash/\">Bash</a> commands to communicate directly with the Linux machine underlying our JupyterHub account. For example, to orient ourselves in the terminal, we can do the following:<ul>\n<li>Enter the Bash command <code>pwd</code> to print the name of the directory you are currently working in (it should be your home directory <code>/home/&lt;CWL-username&gt;</code> where <code>&lt;CWL-username&gt;</code> is your own CWL username)</li>\n<li>Enter the Bash command <code>ls</code> to list the contents of the current directory</li>\n</ul>\n</li>\n<li>In a new browser tab:<ul>\n<li>Navigate to the repository on GitHub that we created in the previous exercise</li>\n<li>Click the green button <code>Clone or download</code> and then click the clipboard icon to copy the repo URL to your clipboard</li>\n</ul>\n</li>\n<li>Go back to the browser tab with the terminal on JupyterHub:<ul>\n<li>Enter the command <code>git clone &lt;GitHub Repo URL&gt;</code> where <code>&lt;GitHub Repo URL&gt;</code> is the URL of your GitHub repo which you copied to your clipboard in the last step. For example, according to the names I chose above, I would enter:<ul>\n<li><code>git clone https://github.com/patrickwalls/ubcs3-exercises.git</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"exercise-3-3-make-a-change-to-readme-md-on-jupyterhub-and-push-the-change-to-github\">EXERCISE 3.3: Make a change to README.md on JupyterHub and push the change to GitHub</h3>\n<p>On your main page on JupyterHub, you should have a folder called <code>ubcs3-exercises</code> or whatever name you chose in the previous exercises. This is the clone we made in the previous exercise.</p>\n<ul>\n<li>On your main page on JupyterHub (in your home directory), click on the folder <code>ubcs3-exercises</code></li>\n<li>Click on the file <code>README.md</code></li>\n<li>The text file will open in the JupyterHub text editor in a new tab in your bowser</li>\n<li>Make a change to the README.md file:<ul>\n<li>Add a line which starts with <code>Exercise 1.</code> and then describes the Jupyter notebook you wrote in Exercise 2.1 about a project you are interested in</li>\n<li>Click <code>File</code> and then <code>Save</code> and then close the broswer tab</li>\n</ul>\n</li>\n<li>Let&#39;s look at the change we&#39;ve made:<ul>\n<li>Open a new terminal from the JupyterHub main page</li>\n<li>Navigate to the repo <code>ubcs3-exercises</code> by entering the command:<ul>\n<li><code>cd ubcs3-exercises</code></li>\n</ul>\n</li>\n<li>To see the state of the Git repo, enter the command:<ul>\n<li><code>git status</code></li>\n</ul>\n</li>\n<li>The output tells us that we have an untracked modification to the file <code>README.md</code></li>\n</ul>\n</li>\n<li>Add the change to the staging area by entering the command:<ul>\n<li><code>git add README.md</code></li>\n</ul>\n</li>\n<li>Commit the change with a descriptive message by entering the command:<ul>\n<li><code>git commit -m &quot;Added a description of Exercise 1 to README.md&quot;</code></li>\n</ul>\n</li>\n<li>The change we made only exists on JupyterHub and so to push the change to GitHub we enter the command in the terminal:<ul>\n<li><code>git push origin master</code></li>\n<li>Git will ask you for your GitHub username and password</li>\n</ul>\n</li>\n<li>To recap, after we&#39;ve edited the file <code>README.md</code> using the text editor on JupyterHub, we enter the commands (in the terminal while working in the <code>ubc3-exercises</code> directory):<ul>\n<li><code>git add README.md</code></li>\n<li><code>git commit -m &quot;Added a description to Exercise 2.1 to README.md&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ul>\n</li>\n<li>Go to GitHub, navigate to the <code>ubcs3-exercises</code> repo and see that the changes we made while working in JupyterHub have been updated on GitHub</li>\n</ul>\n<h3 id=\"exercise-3-4-make-a-change-to-readme-md-on-github-and-pull-the-change-to-jupyterhub\">EXERCISE 3.4: Make a change to README.md on GitHub and pull the change to JupyterHub</h3>\n<p>In the last exercise, we made a change to the file <code>README.md</code> using the text editor on JupyterHub and then we pushed the changes to GitHub. In this exercise, we&#39;ll go the other way and make a change on GitHub and pull the change to JupyterHub.</p>\n<ul>\n<li>Open a browser tab and navigate to the GitHub repo <code>ubc3-exercises</code> we&#39;ve been working with in the last few exercises</li>\n<li>Click on <code>README.md</code></li>\n<li>Click the pencil icon in the toolbar above the text in the <code>README.md</code> file</li>\n<li>You are navigated to a text editor on GitHub where you can make changes to <code>README.md</code><ul>\n<li>Add a line the file which displays the name of the Jupyter notebook we created in the first exercise above</li>\n<li>Write a commit message describing the change</li>\n<li>Click <code>Commit changes</code></li>\n</ul>\n</li>\n<li>In a new browser tab, sign in to your JupyterHub account and open a new terminal</li>\n<li>Enter the command <code>cd ubc3-exercises</code> to change into the directory called <code>ubc3-exercises</code></li>\n<li>Enter <code>git pull</code> and the chagnes from GitHub will update the <code>README.md</code> file on JupyterHub</li>\n</ul>\n<h3 id=\"exercise-3-5-add-your-jupyter-notebook-to-the-git-repo-and-push-it-to-github\">EXERCISE 3.5: Add your Jupyter notebook to the Git repo and push it to GitHub</h3>\n<p>Finally, let&#39;s add our Jupyter notebook from Exercise 2.1 above into our Git repository on JupyterHub.</p>\n<ul>\n<li>Open a new terminal in JupyerHub</li>\n<li>Type the command <code>mv &lt;path to file&gt; &lt;destination directory&gt;</code> to move a file to the destination directory. For example, the notebook I wrote in Exercise 2.1 is called <code>intro-scikit-learn.ipynb</code> and saved in the folder <code>~/ubcs3/week-1/</code> (note that the tilde <code>~</code> refers to your home directory) therefore I would enter the command</li>\n</ul>\n<pre><code>mv ~<span class=\"hljs-regexp\">/ubcs3/</span>week-<span class=\"hljs-number\">1</span><span class=\"hljs-regexp\">/intro-scikit-learn.ipynb ~/u</span>bcs3-exercises<span class=\"hljs-regexp\">/</span>\n</code></pre><ul>\n<li>Type the command <code>git status</code> to see that we have an untracked file</li>\n<li>Add, commit and push the changes to GitHub:<ul>\n<li><code>git add intro-scikit-learn.ipynb</code></li>\n<li><code>git commit -m &quot;Added a the notebook from Exercise 2.1&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ul>\n</li>\n<li>Git will ask for your GitHub username and password</li>\n<li>Go to GitHub and see that your notebook is now on your GitHub repo!</li>\n</ul>\n","2016-07-27-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks/2016-07-27-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"july-27-2016\">July 27, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<ol>\n<li>Git/GitHub: clone, push and pull, and collaborate</li>\n<li>Bash: commands for navigating the Linux file system</li>\n<li>Python datatypes: <code>int</code>, <code>float</code>, <code>str</code>, <code>list</code>, <code>bool</code></li>\n</ol>\n<h2 id=\"1-git-and-github\">1. Git and GitHub</h2>\n<p><a href=\"https://git-scm.com/\">Git</a> is open source, version control software for managing software projects. <a href=\"https://github.com\">GitHub</a> is a website which hosts Git repositories and facilitates open source software collaboration.</p>\n<p>Although it is possible to edit files in a repository on GitHub itself, most work is done locally (ie. on your own machine - for example, your JupyterHub account) and then changes are pushed and pulled from GitHub to your local Git repository. See <a href=\"https://help.github.com/\">GitHub Help</a> for plenty of resources on using Git and GitHub.</p>\n<p>In the exercise below, we will collaborate on GitHub following the GitHub collaborator workflow:</p>\n<ul>\n<li>A central user (ie. patrickwalls) creates a repository in their GitHub account</li>\n<li>The central user adds collaborators to the repository by their username</li>\n<li>Collaborators clone the GitHub repository from the central user to their own machines</li>\n<li>Collaborators make changes locally and push them to GitHub</li>\n<li>Collaborators pull other people&#39;s changes from GitHub to their local machine</li>\n<li>Communications, conflicts and ideas are shared in the issues tab of the GitHub repository</li>\n</ul>\n<h3 id=\"exercise-1-1-collaborating-on-github\">Exercise 1.1: Collaborating on GitHub</h3>\n<p><code>patrickwalls</code> created a repository on GitHub for us to share resources for the seminar:</p>\n<pre><code>http:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/patrickwalls/u</span>bcs3-resources\n</code></pre><ol>\n<li>Become a collaborator for the repository:<ul>\n<li>Go to the issues tab of the repository and post a message on the issue titled &quot;Looking for collaborators!&quot;</li>\n<li><code>patrickwalls</code> will add your username to the list of collaborators</li>\n<li>You now have push access to the repository</li>\n</ul>\n</li>\n<li>Clone the GitHub repository to your JupyterHub account:<ul>\n<li>Login to JupyterHub</li>\n<li>Open a new terminal</li>\n<li>Enter the command <code>git clone https://github.com/patrickwalls/ubcs3-resources.git</code></li>\n</ul>\n</li>\n<li>Make a contribution and push it to GitHub:<ul>\n<li>On JupyterHub, create a .md file which introduces an online resource you think would be helpful to others</li>\n<li>To avoid conflicts, let&#39;s all name our files in the form <code>username-resource.md</code>. For example, to share <a href=\"https://onlywei.github.io/explain-git-with-d3/\">Visualizing Git with D3</a>, I would name my file <code>patrickwalls-visualizing-git.md</code> and save it to the <code>git-resources</code> folder in the repo.</li>\n<li>In the terminal, navigate to your cloned repo and push your contribution to GitHub by entering these commands:<ul>\n<li>Add your changes to the staging area: <code>git add &lt;filename&gt;</code></li>\n<li>Commit your changes: <code>git commit -m &quot;Added resource for ... &quot;</code></li>\n<li>Push your changes: <code>git push origin master</code><ul>\n<li>If someone has pushed changes since the last time you pulled in from the GitHub repo, you must enter the command <code>git pull</code> to update your local repo before you can push your changes</li>\n<li>If you pull changes after you have made changes to your local repo, the commmand <code>git pull</code> performs a merge and Git will open the Emacs text editor and require you to write a merge commit message</li>\n<li>In Emacs, you can simply enter <code>CTRL-x CTRL-s</code> to save the default commit message and then <code>CTRL-x CTRL-c</code> to exit</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Pull everyone&#39;s changes from GitHub to your cloned repo on JupyterHub:<ul>\n<li>In the terminal, navigate to your cloned repo and enter the command <code>git pull</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-bash\">2. Bash</h2>\n<p>The <a href=\"https://www.gnu.org/software/bash/\">Bash shell</a> is a program on a Linux machine where the user types commands to interact with the Linux operating system. There are <em>many</em> powerful Bash commands designed for different purposes:</p>\n<ul>\n<li>navigating the file system</li>\n<li>creating and deleting elements in the file system</li>\n<li>finding files and directories in the file system</li>\n<li>editing and manipulating files and directories</li>\n<li>setting permissions on files and directories</li>\n<li>managing users and networks</li>\n<li>et cetera</li>\n</ul>\n<p>At the moment, we will only consider the most common Bash commands (see the <a href=\"http://cli.learncodethehardway.org/bash_cheat_sheet.pdf\">Bash Shell Cheat Sheet</a>):</p>\n<ul>\n<li><code>pwd</code> â€“ print working directory</li>\n<li><code>ls</code> â€“ list contents of the working directory</li>\n<li><code>mkdir &lt;directoryname&gt;</code> â€“ create a new directory</li>\n<li><code>cd &lt;directoryname&gt;</code> â€“ navigate into the specified directory</li>\n<li><code>less &lt;filename&gt;</code> â€“ view the contents of a file</li>\n<li><code>cat &lt;filename&gt;</code> â€“ display contents of a file in the terminal</li>\n<li><code>head &lt;filename&gt;</code> - display the top 10 lines of a file<ul>\n<li><code>head -n &lt;filename&gt;</code> to display the top <code>n</code> lines</li>\n</ul>\n</li>\n<li><code>tail &lt;filename&gt;</code> - display the last 10 lines of a file<ul>\n<li><code>tail -n &lt;filename&gt;</code> to display the last <code>n</code> lines</li>\n</ul>\n</li>\n<li><code>rm &lt;filename&gt;</code> â€“ delete a file (immediately and permanently!)</li>\n<li><code>mv &lt;filename&gt; &lt;destination&gt;</code> - move (or rename) a file</li>\n<li><code>wc &lt;filename&gt;</code> â€“ show the number of lines, words, bytes or characters in a file</li>\n<li><code>sort &lt;filename&gt;</code> â€“ sort the contents of a file</li>\n<li><code>curl &lt;url&gt;</code> â€“ retrieve and output the contents of the file located at the specified URL</li>\n</ul>\n<h3 id=\"exercise-2-1-exploring-the-git-repository\">Exercise 2.1: Exploring the Git repository</h3>\n<p>Open a new terminal in JupyterHub and enter the following commands:</p>\n<ul>\n<li>Orient yourself in the file system:<ul>\n<li><code>pwd</code></li>\n<li><code>ls</code></li>\n</ul>\n</li>\n<li>Navigate into the Git repo cloned in Exercise 1.1 above and view its contents:<ul>\n<li><code>cd ubcs3-resources</code></li>\n<li><code>ls</code></li>\n</ul>\n</li>\n<li>One directory at a time, navigate into the directory, list its contents, view a file and navigate back to the directory above it:<ul>\n<li><code>cd git-resources</code></li>\n<li><code>ls</code></li>\n<li><code>less patrickwalls-visualizing-git.md</code></li>\n<li><code>cd ..</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"exercise-2-2-sorting-word-counts-in-text-files\">Exercise 2.2: Sorting word counts in text files</h3>\n<ul>\n<li>Navigate to the <code>git-resources</code> directory in the <code>ubcs3-resources</code> directory</li>\n<li>Choose a file and enter the commmand <code>wc &lt;filename&gt;</code> to see the number of lines, words and characters in the file</li>\n<li>Enter the command <code>wc -w *.md</code> to see the number of words in each file in the current directory which end in <code>.md</code><ul>\n<li>The asterisk is called a <a href=\"http://www.linfo.org/wildcard.html\">wildcard</a> and the expression <code>*.md</code> translates to &quot;any file ending in <code>.md</code>&quot;</li>\n<li>The option <code>-w</code> is called a flag and specifies the option to only show the number of words in the file</li>\n</ul>\n</li>\n<li>Finally, to order the files in terms of the words in each file, enter the command <code>wc -w *.md | sort -n</code><ul>\n<li>The character <code>|</code> is a <a href=\"http://www.linfo.org/pipe.html\">pipe</a> and takes the output from the first command <code>wc -w *.md</code> and uses it as input into the second command <code>sort -n</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-python\">3. Python</h2>\n<h3 id=\"datatypes\">Datatypes</h3>\n<p>There are several built in datatypes in Python. See the <a href=\"https://docs.python.org/3/library/stdtypes.html\">Python 3 documentation</a> for a complete list of types.</p>\n<h4 id=\"integers-int-\">Integers - <code>int</code></h4>\n<p>Here are a few examples of operations involving integers:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code><span class=\"hljs-number\">3</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code><span class=\"hljs-deletion\">-1</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">7</span> * <span class=\"hljs-number\">13</span>\n</code></pre>\n<pre><code><span class=\"hljs-number\">91</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">3</span>\n</code></pre>\n<pre><code><span class=\"hljs-number\">8</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">9</span> / <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\"># division always returns a float</span>\n</code></pre>\n<pre><code>4<span class=\"hljs-selector-class\">.5</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">9</span> // <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\"># floor division rounds down to the nearest integer</span>\n</code></pre>\n<pre><code><span class=\"hljs-number\">4</span>\n</code></pre><pre><code class=\"lang-python\">type(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\"># check the type</span>\n</code></pre>\n<pre><code><span class=\"hljs-keyword\">int</span>\n</code></pre><h4 id=\"floats-float-\">Floats - <code>float</code></h4>\n<p>Notice that in Python 3 division involving integers always returns a float:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">100</span> / <span class=\"hljs-number\">10</span>\n</code></pre>\n<pre><code>10<span class=\"hljs-selector-class\">.0</span>\n</code></pre><p>More examples of operations involving floats:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">0.5</span>\n</code></pre>\n<pre><code>1<span class=\"hljs-selector-class\">.4142135623730951</span>\n</code></pre><pre><code class=\"lang-python\">type(<span class=\"hljs-number\">3.14159</span>)\n</code></pre>\n<pre><code><span class=\"hljs-keyword\">float</span>\n</code></pre><h4 id=\"strings-str-\">Strings - <code>str</code></h4>\n<p>Strings are sequences of characters enclosed in (single or double) quotes. Here are some operations involving strings:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-string\">\"hello\"</span>\n</code></pre>\n<pre><code><span class=\"hljs-symbol\">'hello</span>'\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-string\">\"hello\"</span> + <span class=\"hljs-string\">\"world\"</span>\n</code></pre>\n<pre><code><span class=\"hljs-symbol\">'helloworld</span>'\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-string\">\"hello\"</span> * <span class=\"hljs-number\">3</span>\n</code></pre>\n<pre><code><span class=\"hljs-symbol\">'hellohellohello</span>'\n</code></pre><pre><code class=\"lang-python\">type(<span class=\"hljs-string\">\"howdy\"</span>)\n</code></pre>\n<pre><code><span class=\"hljs-keyword\">str</span>\n</code></pre><h4 id=\"lists-list-\">Lists -  <code>list</code></h4>\n<p>Lists are ordered sequences of arbitrary Python objects. We use brackets and commas (ie. <code>[1,2,3]</code>) to define lists:</p>\n<pre><code class=\"lang-python\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n</code></pre>\n<pre><code>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</code></pre><pre><code class=\"lang-python\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"one\"</span>,<span class=\"hljs-number\">1.0</span>]\n</code></pre>\n<pre><code>[<span class=\"hljs-number\">1</span>, 'one', <span class=\"hljs-number\">1.0</span>]\n</code></pre><pre><code class=\"lang-python\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>] + [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>] + [<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>]\n</code></pre>\n<pre><code>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]\n</code></pre><pre><code class=\"lang-python\">type([<span class=\"hljs-string\">'h'</span>,<span class=\"hljs-string\">'e'</span>,<span class=\"hljs-string\">'l'</span>,<span class=\"hljs-string\">'l'</span>,<span class=\"hljs-string\">'o'</span>])\n</code></pre>\n<pre><code><span class=\"hljs-built_in\">list</span>\n</code></pre><h4 id=\"boolean-bool-\">Boolean - <code>bool</code></h4>\n<p>Boolean type consists of <code>True</code> and <code>False</code>. The usual <a href=\"https://docs.python.org/3/library/stdtypes.html#comparisons\">comparison operators</a> <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code> along with the <a href=\"https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not\">boolean operators</a> <code>and</code>, <code>or</code>, <code>not</code> produce boolean types.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">False</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-string\">'Hello'</span> != <span class=\"hljs-string\">'hello'</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">8</span> == <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">6</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\">type(<span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<pre><code><span class=\"hljs-keyword\">bool</span>\n</code></pre>","2016-08-03-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks//2016-08-03-notes/2016-08-03-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"august-3-2016\">August 3, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<ol>\n<li>Bash<ul>\n<li>Review: Bash commands</li>\n<li>More Bash commands</li>\n<li>Exercise: Scraping the web</li>\n</ul>\n</li>\n<li>Python: logic, loops and functions</li>\n<li>A quick intro to NumPy and matplotlib </li>\n</ol>\n<h3 id=\"1-bash\">1. Bash</h3>\n<p>We can execute Bash commands in at least 3 ways:</p>\n<ol>\n<li>Enter Bash commands in the terminal</li>\n<li>Enter Bash commands (beginning with a bang character <code>!</code>) in a code cell in a Jupyter notebook</li>\n<li>Write several lines of Bash commands in a text file with extension <code>.sh</code> and call it from the terminal:</li>\n</ol>\n<pre><code class=\"lang-bash\">bash my_script.sh\n</code></pre>\n<h3 id=\"1-1-review-bash-commands\">1.1 Review: Bash commands</h3>\n<p>Recall, we have already used several simple Bash commands:</p>\n<h4 id=\"interacting-with-the-file-system\">Interacting with the file system</h4>\n<ul>\n<li><code>pwd</code></li>\n<li><code>ls</code></li>\n<li><code>cd</code></li>\n</ul>\n<h4 id=\"creating-removing-files-and-directories\">Creating/removing files and directories</h4>\n<ul>\n<li><code>mkdir</code></li>\n<li><code>rm</code></li>\n<li><code>mv</code></li>\n</ul>\n<h4 id=\"viewing-contents-of-a-file\">Viewing contents of a file</h4>\n<ul>\n<li><code>less</code></li>\n<li><code>cat</code></li>\n<li><code>head</code></li>\n<li><code>tail</code></li>\n<li><code>wc</code></li>\n<li><code>sort</code></li>\n</ul>\n<pre><code class=\"lang-python\">! head <span class=\"hljs-number\">-3</span> ../README.md\n</code></pre>\n<pre><code><span class=\"hljs-section\">## UBC Scientific Software Seminar</span>\n\nThe UBC Scientific Software Seminar is inspired by [<span class=\"hljs-string\">Software Carpentry</span>](<span class=\"hljs-link\">http://software-carpentry.org/</span>) and its goal is to help students, graduates, fellows and faculty at UBC develop software skills for science.\n</code></pre><pre><code class=\"lang-python\">! wc -l ../README.md\n</code></pre>\n<pre><code>      <span class=\"hljs-number\">62</span> ../README.<span class=\"hljs-built_in\">md</span>\n</code></pre><p>Note that <code>..</code> is a reference to the directory above the current working directory.</p>\n<h4 id=\"pipes-redirections-and-wildcards\">Pipes, redirections and wildcards</h4>\n<p>We also saw how to use the output of one command as the input into another using the pipe character <code>|</code>, and how to redirect output to a file using the character <code>&gt;</code>.</p>\n<h3 id=\"1-2-more-bash-commands\">1.2 More Bash commands</h3>\n<p>Today, we&#39;ll look at more advanced commmands such as:</p>\n<ul>\n<li><code>curl</code></li>\n<li><code>grep</code></li>\n<li><code>find</code></li>\n<li><code>cut</code></li>\n<li><code>rev</code></li>\n<li><code>date</code></li>\n<li><code>sleep</code></li>\n</ul>\n<p>See the <a href=\"http://cli.learncodethehardway.org/bash_cheat_sheet.pdf\">Bash cheat sheet</a> for details regarding these commands.</p>\n<h4 id=\"curl\">curl</h4>\n<p>The command <code>curl</code> fetches a file from a given url and prints the result to standard output.</p>\n<p>For example, we can fetch the <a href=\"http://www.gutenberg.org/cache/epub/100/pg100.txt\">collected works of Shakespeare</a> and redirect the output to a file named <code>shakespeare.txt</code>:</p>\n<pre><code class=\"lang-python\">! curl http://www.gutenberg.org/cache/epub/<span class=\"hljs-number\">100</span>/pg100.txt &gt; shakespeare.txt\n</code></pre>\n<pre><code>  % <span class=\"hljs-selector-tag\">Total</span>    % <span class=\"hljs-selector-tag\">Received</span> % <span class=\"hljs-selector-tag\">Xferd</span>  <span class=\"hljs-selector-tag\">Average</span> <span class=\"hljs-selector-tag\">Speed</span>   <span class=\"hljs-selector-tag\">Time</span>    <span class=\"hljs-selector-tag\">Time</span>     <span class=\"hljs-selector-tag\">Time</span>  <span class=\"hljs-selector-tag\">Current</span>\n                                 <span class=\"hljs-selector-tag\">Dload</span>  <span class=\"hljs-selector-tag\">Upload</span>   <span class=\"hljs-selector-tag\">Total</span>   <span class=\"hljs-selector-tag\">Spent</span>    <span class=\"hljs-selector-tag\">Left</span>  <span class=\"hljs-selector-tag\">Speed</span>\n100 5458<span class=\"hljs-selector-tag\">k</span>  100 5458<span class=\"hljs-selector-tag\">k</span>    0     0  3182<span class=\"hljs-selector-tag\">k</span>      0  0<span class=\"hljs-selector-pseudo\">:00</span><span class=\"hljs-selector-pseudo\">:01</span>  0<span class=\"hljs-selector-pseudo\">:00</span><span class=\"hljs-selector-pseudo\">:01</span> <span class=\"hljs-selector-tag\">--</span><span class=\"hljs-selector-pseudo\">:--</span><span class=\"hljs-selector-pseudo\">:--</span> 3183<span class=\"hljs-selector-tag\">k</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Look at the first 20 lines of the file</span>\n! head <span class=\"hljs-number\">-20</span> shakespeare.txt\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Count the number of lines in the file</span>\n! wc -l shakespeare.txt\n</code></pre>\n<pre><code>  124787 <span class=\"hljs-selector-tag\">shakespeare</span><span class=\"hljs-selector-class\">.txt</span>\n</code></pre><h4 id=\"grep\">grep</h4>\n<p>The command <code>grep</code> looks in a file for the occurence of a pattern of characters specified by a <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">regular expression</a>. We won&#39;t go into regular expressions today and so we&#39;ll restrict our searches to words and phrases.</p>\n<p>For example, let&#39;s count the number of times the word &quot;love&quot; appears in Shakespeare&#39;s works (ignoring case):</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Count the number of occurences of \"love\"</span>\n<span class=\"hljs-comment\"># The flag -i ignores case and so looks for \"love\", \"Love\", \"LOVE\", etc.</span>\n! grep -i love shakespeare.txt | wc -l\n</code></pre>\n<pre><code>    <span class=\"hljs-number\">2653</span>\n</code></pre><p>We can also look for phrases:</p>\n<pre><code class=\"lang-python\">! grep <span class=\"hljs-string\">\"wherefore art thou\"</span> shakespeare.txt\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># The flags -B and -A show lines occuring before and after the search text</span>\n! grep -B <span class=\"hljs-number\">2</span> -A <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">\"grave man\"</span> shakespeare.txt\n</code></pre>\n<pre><code class=\"lang-python\">! rm shakespeare.txt\n</code></pre>\n<h3 id=\"1-3-exercise-scraping-the-web\">1.3 Exercise: Scraping the web</h3>\n<p>Write a Bash script which fetches the headlines from several different RSS feeds from cbc.ca (see <a href=\"http://www.cbc.ca/rss/\">cbc.ca/rss/</a>) and saves them to a text file with a time stamp. Go even further and write the script so that it fetches headlines every 15 minutes.</p>\n<p>As a first step, let&#39;s get an XML file from <a href=\"http://www.cbc.ca\">cbc.ca</a> and take a look at it:</p>\n<pre><code class=\"lang-python\">! curl http://www.cbc.ca/cmlink/rss-topstories &gt; topstories-raw.txt\n</code></pre>\n<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">18540</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">18540</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">779</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span>  <span class=\"hljs-number\">787</span>k\n</code></pre><pre><code class=\"lang-python\">! head <span class=\"hljs-number\">-30</span> topstories-raw.txt\n</code></pre>\n<pre><code><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rss</span> <span class=\"hljs-attr\">xmlns:cbc</span>=<span class=\"hljs-string\">\"http://www.cbc.ca/rss/cbc\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">channel</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[CBC | Top Stories News ]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>&gt;</span>http://www.cbc.ca/news/?cmp=rss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>\n      &lt;![CDATA[\n      FOR PERSONAL USE ONLY\n      ]]&gt;\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">language</span>&gt;</span>en-ca<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">language</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">lastBuildDate</span>&gt;</span>Wed, 3 Aug 2016 17:33:15 EDT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">lastBuildDate</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">copyright</span>&gt;</span>&lt;![CDATA[Copyright: (C) Canadian Broadcasting Corporation, http://www.cbc.ca/aboutcbc/discover/termsofuse.html#Rss]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">copyright</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">docs</span>&gt;</span>&lt;![CDATA[http://www.cbc.ca/rss/]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">docs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CBC.ca<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://www.cbc.ca/rss/image/cbc_144.gif<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>&gt;</span>http://www.cbc.ca/news/?cmp=rss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">item</span> <span class=\"hljs-attr\">cbc:type</span>=<span class=\"hljs-string\">\"story\"</span> <span class=\"hljs-attr\">cbc:deptid</span>=<span class=\"hljs-string\">\"2.655\"</span> <span class=\"hljs-attr\">cbc:syndicate</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Hunter Tootoo apologizes for 'consensual but inappropriate relationship']]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>&gt;</span>http://www.cbc.ca/news/canada/north/hunter-tootoo-apologizes-for-relationship-1.3706394?cmp=rss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">guid</span> <span class=\"hljs-attr\">isPermaLink</span>=<span class=\"hljs-string\">\"false\"</span>&gt;</span>1.3706394<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">guid</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pubDate</span>&gt;</span>Wed, 3 Aug 2016 17:33:15 EDT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pubDate</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Sima Sahar Zerehi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span>\n                                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span>&gt;</span>News/Canada/North<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">category</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>\n        &lt;![CDATA[\n                        &lt;img title='' height='259' alt='Hunter Tootoo' width='460' src='http://i.cbc.ca/1.3706402.1470259454!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_460/hunter-tootoo.jpg' /&gt;                &lt;p&gt;'I am ashamed and I apologize to all involved,' the former fisheries minister and Nunavut MP said in the CBC newsroom in Iqaluit this afternoon.&lt;/p&gt;\n        ]]&gt;\n</code></pre><p>We can see that the headlines are contained in <code>&lt;title&gt;</code> tags and so we can use <code>grep</code> to find these lines. Notice that the characters <code>&lt;</code> and <code>&gt;</code> are special characters in Bash and so we need to use the escape character <code>\\</code>.</p>\n<pre><code class=\"lang-python\">! grep \\&lt;title\\&gt; topstories-raw.txt\n</code></pre>\n<pre><code>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[CBC | Top Stories News ]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CBC.ca<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Hunter Tootoo apologizes for 'consensual but inappropriate relationship']]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Canadian women's soccer team wins Olympic opener over Australia]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Mike Pence's endorsement of Paul Ryan is a break with Trump]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Meet the 5 commissioners overseeing the inquiry into missing, murdered Indigenous women]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Man charged with uttering threats against Prime Minister Justin Trudeau on Facebook]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Donald Trump in Florida LIVE at 7 p.m. ET]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Student sues college after work placement beating left her blind in 1 eye]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Spirits of missing, murdered Indigenous women 'close in our hearts,' says First Nations judge leading inquiry]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[U.S. buyer says abandoning deal on Vancouver home likely cheaper than foreign-buyer tax]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA['This is a shame!' Filthy waters raise ire ahead of Rio Olympics ]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Obama shortens 214 prison sentences â€” including dozens of life terms]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Rowing Canada's 'death machine' grooms champions]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Humans didn't kill off these mammoths, but scientists know what did]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Washington transit officer allegedly caught funding ISIS]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;![CDATA[Private firm granted U.S. permission to fly to moon for 1st time]]&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n</code></pre><p>The lines which contain headlines have 22 characters at the beginning of each line which we would like to cut out. We can use the <code>cut</code> command to accomplish this task. (See the Bash cheat sheet or Google <code>bash cut</code> for help.)</p>\n<pre><code class=\"lang-python\">! grep \\&lt;title\\&gt; topstories-raw.txt | cut -c <span class=\"hljs-number\">23</span>-\n</code></pre>\n<pre><code>C | Top Stories News ]]&gt;&lt;/title&gt;\nitle&gt;\nHunter Tootoo apologizes <span class=\"hljs-keyword\">for</span> <span class=\"hljs-comment\">'consensual but inappropriate relationship']]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nCanadian women<span class=\"hljs-comment\">'s soccer team wins Olympic opener over Australia]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nMike Pence<span class=\"hljs-comment\">'s endorsement of Paul Ryan is a break with Trump]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nMeet the <span class=\"hljs-number\">5</span> commissioners overseeing the inquiry <span class=\"hljs-keyword\">into</span> missing, murdered Indigenous women]]&gt;&lt;/title&gt;\nMan charged <span class=\"hljs-keyword\">with</span> uttering threats against Prime Minister Justin Trudeau <span class=\"hljs-keyword\">on</span> Facebook]]&gt;&lt;/title&gt;\nDonald Trump <span class=\"hljs-keyword\">in</span> Florida LIVE at <span class=\"hljs-number\">7</span> p.m. ET]]&gt;&lt;/title&gt;\nStudent sues college after work placement beating left her blind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> eye]]&gt;&lt;/title&gt;\nSpirits <span class=\"hljs-keyword\">of</span> missing, murdered Indigenous women <span class=\"hljs-comment\">'close in our hearts,' says First Nations judge leading inquiry]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nU.S. buyer says abandoning deal <span class=\"hljs-keyword\">on</span> Vancouver home likely cheaper than foreign-buyer tax]]&gt;&lt;/title&gt;\n<span class=\"hljs-comment\">'This is a shame!' Filthy waters raise ire ahead of Rio Olympics ]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nObama shortens <span class=\"hljs-number\">214</span> prison sentences â€” including dozens <span class=\"hljs-keyword\">of</span> life terms]]&gt;&lt;/title&gt;\nRowing Canada<span class=\"hljs-comment\">'s 'death machine' grooms champions]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nHumans didn<span class=\"hljs-comment\">'t kill off these mammoths, but scientists know what did]]&gt;<span class=\"hljs-doctag\">&lt;/title&gt;</span></span>\nWashington transit officer allegedly caught funding ISIS]]&gt;&lt;/title&gt;\n<span class=\"hljs-keyword\">Private</span> firm granted U.S. permission <span class=\"hljs-keyword\">to</span> fly <span class=\"hljs-keyword\">to</span> moon <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">1</span>st time]]&gt;&lt;/title&gt;\n</code></pre><p>Now there are 11 characters at the end of each line we would like to eliminate. We can use the command <code>rev</code> to reverse the order of each line and then use <code>cut</code> to remove these characters.</p>\n<pre><code class=\"lang-python\">! grep \\&lt;title\\&gt; topstories-raw.txt | cut -c <span class=\"hljs-number\">23</span>- | rev | cut -c <span class=\"hljs-number\">12</span>- | rev\n</code></pre>\n<pre><code>C | Top Stories News \n\nHunter Tootoo apologizes <span class=\"hljs-keyword\">for</span> 'consensual <span class=\"hljs-keyword\">but</span> inappropriate relationship'\nCanadian women's soccer team wins Olympic opener <span class=\"hljs-keyword\">over</span> Australia\nMike Pence's endorsement <span class=\"hljs-keyword\">of</span> Paul Ryan <span class=\"hljs-keyword\">is</span> a break <span class=\"hljs-keyword\">with</span> Trump\nMeet <span class=\"hljs-keyword\">the</span> <span class=\"hljs-number\">5</span> commissioners overseeing <span class=\"hljs-keyword\">the</span> inquiry <span class=\"hljs-keyword\">into</span> missing, murdered Indigenous women\nMan charged <span class=\"hljs-keyword\">with</span> uttering threats <span class=\"hljs-keyword\">against</span> Prime Minister Justin Trudeau <span class=\"hljs-keyword\">on</span> Facebook\nDonald Trump <span class=\"hljs-keyword\">in</span> Florida LIVE <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">7</span> p.m. ET\nStudent sues college <span class=\"hljs-keyword\">after</span> work placement beating left her blind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> eye\nSpirits <span class=\"hljs-keyword\">of</span> missing, murdered Indigenous women 'close <span class=\"hljs-keyword\">in</span> our hearts,' says First Nations judge leading inquiry\nU.S. buyer says abandoning deal <span class=\"hljs-keyword\">on</span> Vancouver home likely cheaper than foreign-buyer tax\n'This <span class=\"hljs-keyword\">is</span> a shame!' Filthy waters raise ire ahead <span class=\"hljs-keyword\">of</span> Rio Olympics \nObama shortens <span class=\"hljs-number\">214</span> prison sentences â€” including dozens <span class=\"hljs-keyword\">of</span> life terms\nRowing Canada's 'death machine' grooms champions\nHumans didn't kill off these mammoths, <span class=\"hljs-keyword\">but</span> scientists know what did\nWashington transit officer allegedly caught funding ISIS\nPrivate firm granted U.S. permission <span class=\"hljs-keyword\">to</span> fly <span class=\"hljs-keyword\">to</span> moon <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">1</span>st <span class=\"hljs-built_in\">time</span>\n</code></pre><p>Finally, we want to eliminate the first two lines and then write the result to a file named <code>topstories.txt</code>. We can use the command <code>tail</code> to select all but the first two lines.</p>\n<pre><code class=\"lang-python\">! grep \\&lt;title\\&gt; topstories-raw.txt | cut -c <span class=\"hljs-number\">23</span>- | rev | cut -c <span class=\"hljs-number\">12</span>- | rev | tail -n +<span class=\"hljs-number\">3</span> &gt; topstories.txt\n! rm topstories-raw.txt\n! cat topstories.txt\n</code></pre>\n<pre><code>Hunter Tootoo apologizes <span class=\"hljs-keyword\">for</span> 'consensual <span class=\"hljs-keyword\">but</span> inappropriate relationship'\nCanadian women's soccer team wins Olympic opener <span class=\"hljs-keyword\">over</span> Australia\nMike Pence's endorsement <span class=\"hljs-keyword\">of</span> Paul Ryan <span class=\"hljs-keyword\">is</span> a break <span class=\"hljs-keyword\">with</span> Trump\nMeet <span class=\"hljs-keyword\">the</span> <span class=\"hljs-number\">5</span> commissioners overseeing <span class=\"hljs-keyword\">the</span> inquiry <span class=\"hljs-keyword\">into</span> missing, murdered Indigenous women\nMan charged <span class=\"hljs-keyword\">with</span> uttering threats <span class=\"hljs-keyword\">against</span> Prime Minister Justin Trudeau <span class=\"hljs-keyword\">on</span> Facebook\nDonald Trump <span class=\"hljs-keyword\">in</span> Florida LIVE <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">7</span> p.m. ET\nStudent sues college <span class=\"hljs-keyword\">after</span> work placement beating left her blind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> eye\nSpirits <span class=\"hljs-keyword\">of</span> missing, murdered Indigenous women 'close <span class=\"hljs-keyword\">in</span> our hearts,' says First Nations judge leading inquiry\nU.S. buyer says abandoning deal <span class=\"hljs-keyword\">on</span> Vancouver home likely cheaper than foreign-buyer tax\n'This <span class=\"hljs-keyword\">is</span> a shame!' Filthy waters raise ire ahead <span class=\"hljs-keyword\">of</span> Rio Olympics \nObama shortens <span class=\"hljs-number\">214</span> prison sentences â€” including dozens <span class=\"hljs-keyword\">of</span> life terms\nRowing Canada's 'death machine' grooms champions\nHumans didn't kill off these mammoths, <span class=\"hljs-keyword\">but</span> scientists know what did\nWashington transit officer allegedly caught funding ISIS\nPrivate firm granted U.S. permission <span class=\"hljs-keyword\">to</span> fly <span class=\"hljs-keyword\">to</span> moon <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">1</span>st <span class=\"hljs-built_in\">time</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Now that we have things working, let's remove the file</span>\n! rm topstories.txt\n</code></pre>\n<p>Finally, let&#39;s assemble these commands into a textfile named <code>get-headlines.sh</code> and wrap the commands in a for loop to fetch headlines from several different RSS feeds: topstories, canada, politics, offbeat, sports-nba and canada-britishcolumbia. Notice that we use the character <code>$</code> to access the value of the variable <code>subject</code> in the for loop.</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-comment\"># get-headlines.sh</span>\n\n<span class=\"hljs-keyword\">for</span> subject <span class=\"hljs-keyword\">in</span> topstories canada politics offbeat sports-nba canada-britishcolumbia\n<span class=\"hljs-keyword\">do</span>\ncurl http://www.cbc.ca/cmlink/rss-<span class=\"hljs-variable\">$subject</span> &gt; <span class=\"hljs-variable\">$subject</span>-raw.txt\ngrep \\&lt;title\\&gt; <span class=\"hljs-variable\">$subject</span>-raw.txt | cut -c 23- | rev | cut -c 12- | rev | tail -n +3 &gt; <span class=\"hljs-variable\">$subject</span>.txt\nrm <span class=\"hljs-variable\">$subject</span>-raw.txt\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<pre><code class=\"lang-python\">! bash get-headlines.sh\n</code></pre>\n<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">18540</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">18540</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1357</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1392</span>k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17945</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17945</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1742</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1947</span>k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">19269</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">19269</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1604</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1710</span>k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17699</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17699</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1159</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1152</span>k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17556</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17556</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1207</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1224</span>k\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n<span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17304</span>  <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">17304</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">1725</span>k      <span class=\"hljs-number\">0</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> --<span class=\"hljs-symbol\">:--</span><span class=\"hljs-symbol\">:--</span> <span class=\"hljs-number\">1877</span>k\n</code></pre><pre><code class=\"lang-python\">! ls\n</code></pre>\n<pre><code><span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">08</span>-<span class=\"hljs-number\">03</span>-notes<span class=\"hljs-selector-class\">.ipynb</span>     offbeat<span class=\"hljs-selector-class\">.txt</span>\ncanada-britishcolumbia<span class=\"hljs-selector-class\">.txt</span> politics<span class=\"hljs-selector-class\">.txt</span>\ncanada<span class=\"hljs-selector-class\">.txt</span>                 sports-nba<span class=\"hljs-selector-class\">.txt</span>\nget-headlines-repeat<span class=\"hljs-selector-class\">.sh</span>    topstories<span class=\"hljs-selector-class\">.txt</span>\nget-headlines.sh\n</code></pre><pre><code class=\"lang-python\">! cat offbeat.txt\n</code></pre>\n<pre><code>Edmonton man shot <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">the</span> neck <span class=\"hljs-keyword\">with</span> arrow <span class=\"hljs-keyword\">on</span> America's Got Talent \nReal-life Pokemon: Pikachu statue mysteriously pops up <span class=\"hljs-keyword\">in</span> New Orleans\nCalgary company makes more money <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">not</span> drilling than drilling\nThe cat came <span class=\"hljs-keyword\">back</span> â€” <span class=\"hljs-number\">19</span> months <span class=\"hljs-keyword\">and</span> several snowstorms later\nStolen gnome returned <span class=\"hljs-keyword\">to</span> B.C. woman <span class=\"hljs-keyword\">after</span> <span class=\"hljs-number\">8</span> months <span class=\"hljs-keyword\">with</span> photos <span class=\"hljs-keyword\">of</span> international adventure\n'Trump Bump' <span class=\"hljs-keyword\">in</span> Cape Breton draws tourists, <span class=\"hljs-keyword\">but</span> few new residents\nSnakes force Ontario city <span class=\"hljs-keyword\">to</span> stop cutting grass <span class=\"hljs-keyword\">at</span> public park\nOntario town hit <span class=\"hljs-keyword\">by</span> rash <span class=\"hljs-keyword\">of</span> female mannequin thefts \nBritish badgers terrified <span class=\"hljs-keyword\">by</span> CBC programming, study suggests\nMassive N.B. moth infestation coating cars <span class=\"hljs-keyword\">and</span> parking lots\nShawshank Redemption oak tree knocked down\nPelican vs turtle fight captured <span class=\"hljs-keyword\">on</span> Ontario lake\nBoater battles badger <span class=\"hljs-keyword\">on</span> B.C. lake\nDeath Road <span class=\"hljs-keyword\">to</span> Canada an indie game take <span class=\"hljs-keyword\">on</span> The Walking Dead, <span class=\"hljs-keyword\">with</span> Mounties <span class=\"hljs-keyword\">and</span> Elvis\nNotable bobbleheads, <span class=\"hljs-keyword\">from</span> Pope Francis <span class=\"hljs-keyword\">to</span> Donald Trump\n</code></pre><pre><code class=\"lang-python\">! cat canada.txt\n</code></pre>\n<pre><code>Hunter Tootoo apologizes <span class=\"hljs-keyword\">for</span> 'consensual <span class=\"hljs-keyword\">but</span> inappropriate relationship'\nCanadian women's soccer team wins Olympic opener <span class=\"hljs-keyword\">over</span> Australia\nMarion Buller, B.C. First Nations judge, <span class=\"hljs-keyword\">to</span> lead MMIW inquiry\nFeds apologize <span class=\"hljs-keyword\">after</span> contractor knocks out internet <span class=\"hljs-keyword\">in</span> Yukon, Nunavut\n'It's going <span class=\"hljs-keyword\">to</span> be our ice bucket moment': Brain cancer research could benefit big <span class=\"hljs-keyword\">from</span> Tragically Hip concerts\nBold wolf forces <span class=\"hljs-number\">200</span> campers <span class=\"hljs-keyword\">to</span> relocate tents <span class=\"hljs-keyword\">in</span> Banff National Park\nIrving Oil deal <span class=\"hljs-keyword\">to</span> buy Ireland's only refinery 'very welcome indeed,' says MP\nStudent sues college <span class=\"hljs-keyword\">after</span> work placement beating left her blind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> eye\nCorrectional officer takes stress leave due <span class=\"hljs-keyword\">to</span> Phoenix pay issues\nSask. government doing <span class=\"hljs-keyword\">its</span> own testing <span class=\"hljs-keyword\">of</span> Husky water results\nTeen couple shot <span class=\"hljs-keyword\">to</span> death <span class=\"hljs-keyword\">on</span> Alberta First Nation <span class=\"hljs-keyword\">to</span> be buried side <span class=\"hljs-keyword\">by</span> side\nPM Trudeau <span class=\"hljs-keyword\">to</span> join royals <span class=\"hljs-keyword\">on</span> Yukon visit next <span class=\"hljs-built_in\">month</span>\nP.K. Subban's letter <span class=\"hljs-built_in\">read</span> <span class=\"hljs-keyword\">by</span> Montreal Children's Hospital patients, bringing <span class=\"hljs-keyword\">some</span> <span class=\"hljs-keyword\">to</span> tears\nTrudeau sightings <span class=\"hljs-keyword\">in</span> Tofino B.C. <span class=\"hljs-keyword\">set</span> off waves <span class=\"hljs-keyword\">of</span> Trudeaumania\nDeepa Mehta, Alanis Obomsawin bring latest <span class=\"hljs-keyword\">to</span> TIFF\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Remove the text files created by get-headlines.sh</span>\n! rm *.txt\n</code></pre>\n<h4 id=\"scraping-the-web-repeatedly-with-logging\">Scraping the web repeatedly with logging</h4>\n<p>Taking this example further, we can add some code so that our Bash script get headlines every 15 minutes and writes the headlines with names including the date and time. The result is the following:</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-comment\"># get-headlines-repeat.sh</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">do</span>\n\n  <span class=\"hljs-keyword\">for</span> subject <span class=\"hljs-keyword\">in</span> topstories canada politics offbeat sports-nba canada-britishcolumbia\n  <span class=\"hljs-keyword\">do</span>\n\n    <span class=\"hljs-comment\"># Get the current datetime in the given format</span>\n    now=$(date +<span class=\"hljs-string\">\"%Y-%m-%d-%H-%M\"</span>)\n\n    curl http://www.cbc.ca/cmlink/rss-<span class=\"hljs-variable\">$subject</span> &gt; <span class=\"hljs-variable\">$subject</span>-raw.txt\n\n    grep \\&lt;title\\&gt; <span class=\"hljs-variable\">$subject</span>-raw.txt | cut -c 23- | rev | cut -c 12- | rev | tail -n +3 &gt; <span class=\"hljs-variable\">$subject</span>-<span class=\"hljs-variable\">$now</span>.txt\n\n    rm <span class=\"hljs-variable\">$subject</span>-raw.txt\n\n  <span class=\"hljs-keyword\">done</span>\n\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Retrieved data at <span class=\"hljs-variable\">$now</span> ...\"</span>\n  sleep 900 <span class=\"hljs-comment\"># Sleep for 900 seconds = 15 minutes</span>\n\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># UNCOMMENT THE NEXT LINE TO EXECUTE get-headlines-repeat.sh</span>\n<span class=\"hljs-comment\"># ! bash get-headlines-repeat.sh</span>\n</code></pre>\n<h3 id=\"2-python-logic-loops-and-functions\">2. Python: logic, loops and functions</h3>\n<p>The following is a quick tour of some parts of the standard Python library intended only as an introduction to Python syntax.</p>\n<h4 id=\"comparison-operators\">Comparison operators</h4>\n<ul>\n<li><code>==</code> (equal)</li>\n<li><code>!=</code> (not equal)</li>\n<li><code>&lt;</code> (less than)</li>\n<li><code>&lt;=</code> (less than or equal to)</li>\n<li><code>&gt;</code> (greater than)</li>\n<li><code>&gt;=</code> (greater than or equal to)</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-string\">\"Patrick\"</span> != <span class=\"hljs-string\">\"patrick\"</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">100</span> &gt;= <span class=\"hljs-number\">101</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">False</span>\n</code></pre><h4 id=\"boolean-operators\">Boolean operators</h4>\n<ul>\n<li><code>and</code></li>\n<li><code>or</code></li>\n<li><code>not</code></li>\n<li><code>in</code></li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-number\">3</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">5</span> % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">False</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-string\">'a'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">'aeiou'</span>\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>]\n</code></pre>\n<pre><code><span class=\"hljs-literal\">True</span>\n</code></pre><h4 id=\"functions\">Functions</h4>\n<p>Syntax to define a function:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(x)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> x**<span class=\"hljs-number\">2</span>\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fun</span><span class=\"hljs-params\">(x)</span>:</span>\n    square = x**<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">return</span> square\n</code></pre>\n<pre><code class=\"lang-python\">fun(<span class=\"hljs-number\">2</span>)\n</code></pre>\n<pre><code><span class=\"hljs-number\">4</span>\n</code></pre><pre><code class=\"lang-python\">fun(<span class=\"hljs-number\">-1.234</span>)\n</code></pre>\n<pre><code>1<span class=\"hljs-selector-class\">.522756</span>\n</code></pre><h4 id=\"-if-statement\"><code>if</code> statement</h4>\n<p>Syntax to define <code>if</code> statement:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">if</span> logical_expression_1:\n    <span class=\"hljs-comment\"># Python code block 1</span>\n    <span class=\"hljs-comment\"># indented statndard 4 spaces</span>\n<span class=\"hljs-keyword\">elif</span> logical_expression_2:\n    <span class=\"hljs-comment\"># Python code block 2</span>\n    <span class=\"hljs-comment\"># indented statndard 4 spaces</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-comment\"># Python code block 3</span>\n    <span class=\"hljs-comment\"># indented statndard 4 spaces</span>\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-number\">2</span>:\n    print(<span class=\"hljs-string\">'Duh!'</span>)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"What?\"</span>)\n</code></pre>\n<pre><code>Duh!\n</code></pre><h3 id=\"exercise-2-1-roots-of-quadratics\">Exercise 2.1: Roots of quadratics</h3>\n<p>Write a function which takes parameters a, b, and c and determines whether the polynomial $ax^2 + bx + c$ has real distinct roots, complex roots or one real repeated root.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">roots</span><span class=\"hljs-params\">(a,b,c)</span>:</span>\n    discriminant = b**<span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">4</span>*a*c\n    print(<span class=\"hljs-string\">\"p(x) = {0}x^2 + {1}x + {2}\"</span>.format(a,b,c))\n    <span class=\"hljs-keyword\">if</span> discriminant &gt; <span class=\"hljs-number\">0</span>:\n        print(<span class=\"hljs-string\">\"Roots are real and distinct.\"</span>)\n    <span class=\"hljs-keyword\">elif</span> discriminant &lt; <span class=\"hljs-number\">0</span>:\n        print(<span class=\"hljs-string\">\"Roots are complex.\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">\"One repeated real root.\"</span>)\n</code></pre>\n<pre><code class=\"lang-python\">roots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>)\n</code></pre>\n<pre><code>p(x) = <span class=\"hljs-number\">1</span>x^<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0</span>x + <span class=\"hljs-number\">1</span>\nRoots are complex.\n</code></pre><pre><code class=\"lang-python\">roots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>)\n</code></pre>\n<pre><code>p(x) = <span class=\"hljs-number\">1</span>x^<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0</span>x + <span class=\"hljs-number\">-1</span>\nRoots are real and distinct.\n</code></pre><pre><code class=\"lang-python\">roots(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>)\n</code></pre>\n<pre><code>p(x) = <span class=\"hljs-number\">1</span>x^<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>x + <span class=\"hljs-number\">1</span>\nOne repeated real root.\n</code></pre><h4 id=\"-for-loop\"><code>for</code> loop</h4>\n<p>Syntax to write a <code>for</code> loop:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">for</span> variable <span class=\"hljs-keyword\">in</span> iterable_object:\n    <span class=\"hljs-comment\"># Python code block</span>\n    <span class=\"hljs-comment\"># indented standard 4 spaces</span>\n</code></pre>\n<p>Examples of iterable objects:</p>\n<ul>\n<li>lists</li>\n<li>strings</li>\n<li>an object returned by a generator function such as <code>range</code></li>\n</ul>\n<pre><code class=\"lang-python\">noises = [<span class=\"hljs-string\">\"biz\"</span>,<span class=\"hljs-string\">\"bam\"</span>,<span class=\"hljs-string\">\"boom\"</span>,<span class=\"hljs-string\">\"pow\"</span>]\n<span class=\"hljs-keyword\">for</span> noise <span class=\"hljs-keyword\">in</span> noises:\n    noise = noise.upper() <span class=\"hljs-comment\"># string method .upper() returns the string in uppercase</span>\n    print(noise + <span class=\"hljs-string\">\"!\"</span>)\n</code></pre>\n<pre><code>BIZ!\nBAM!\nBOOM!\nPOW!\n</code></pre><pre><code class=\"lang-python\">my_name = <span class=\"hljs-string\">\"Patrick\"</span>\n<span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> my_name:\n    print(<span class=\"hljs-string\">\"Give me a\"</span>,letter + <span class=\"hljs-string\">\"!\"</span>)\n</code></pre>\n<pre><code>Give me <span class=\"hljs-selector-tag\">a</span> P!\nGive me <span class=\"hljs-selector-tag\">a</span> a!\nGive me <span class=\"hljs-selector-tag\">a</span> t!\nGive me <span class=\"hljs-selector-tag\">a</span> r!\nGive me <span class=\"hljs-selector-tag\">a</span> i!\nGive me <span class=\"hljs-selector-tag\">a</span> c!\nGive me <span class=\"hljs-selector-tag\">a</span> k!\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>):\n    n_squared = n**<span class=\"hljs-number\">2</span>\n    print(n, <span class=\"hljs-string\">\"squared is equal to\"</span>, n_squared)\n</code></pre>\n<pre><code><span class=\"hljs-symbol\">0 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">1 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-symbol\">2 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">3 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-symbol\">4 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">16</span>\n<span class=\"hljs-symbol\">5 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">25</span>\n<span class=\"hljs-symbol\">6 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">36</span>\n<span class=\"hljs-symbol\">7 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">49</span>\n<span class=\"hljs-symbol\">8 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">64</span>\n<span class=\"hljs-symbol\">9 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">81</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>]:\n    n_squared = n**<span class=\"hljs-number\">2</span>\n    print(n, <span class=\"hljs-string\">\"squared is equal to\"</span>, n_squared)\n</code></pre>\n<pre><code><span class=\"hljs-symbol\">0 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">1 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-symbol\">2 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">3 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-symbol\">4 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">16</span>\n<span class=\"hljs-symbol\">5 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">25</span>\n<span class=\"hljs-symbol\">6 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">36</span>\n<span class=\"hljs-symbol\">7 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">49</span>\n<span class=\"hljs-symbol\">8 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">64</span>\n<span class=\"hljs-symbol\">9 </span>squared is equal <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">81</span>\n</code></pre><h3 id=\"exercise-2-2-partial-sums-of-series\">Exercise 2.2: Partial sums of series</h3>\n<p>Write a function which takes parameters $x$ and $N$ and returns the $Nth$ partial sum of the Taylor series of $\\log x$:</p>\n<p>$$\n\\sum_{n=1}^N (-1)^{n+1} \\frac{(x-1)^n}{n}\n$$</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">log_partial_sum</span><span class=\"hljs-params\">(x,N)</span>:</span>\n    result = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,N+<span class=\"hljs-number\">1</span>):\n        result = result + (<span class=\"hljs-number\">-1</span>)**(n+<span class=\"hljs-number\">1</span>) * (x<span class=\"hljs-number\">-1</span>)**n / n\n    <span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Check log(1) = 0</span>\nlog_partial_sum(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)\n</code></pre>\n<pre><code>0<span class=\"hljs-selector-class\">.0</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Check log(1/e) = -1</span>\nlog_partial_sum(<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">2.7182818284590451</span>,<span class=\"hljs-number\">50</span>)\n</code></pre>\n<pre><code><span class=\"hljs-selector-tag\">-0</span><span class=\"hljs-selector-class\">.9999999999964204</span>\n</code></pre><h3 id=\"3-numpy-and-matplotlib\">3. NumPy and matplotlib</h3>\n<p>Python is a general purpose scripting language and can be used to solve a wide variety of problems. Python packages are modules of Python scripts designed for a specific problem and the <a href=\"https://pypi.python.org/pypi\">Python Package Index (PyPI)</a> currently hosts over 85,000 open source packages!</p>\n<p>There are Python packages for just about everything: server-side web applications, symbolic mathematical computation, image processing, interactive web-based data visualization, et cetera.</p>\n<p>We will focus on the SciPy stack: <a href=\"http://www.numpy.org/\">NumPy</a>, <a href=\"http://scipy.org/\">SciPy</a>, <a href=\"http://matplotlib.org/\">matplotlib</a> and <a href=\"http://pandas.pydata.org/\">pandas</a>. These Python packages form the basis of scientific computing in Python.</p>\n<p>NumPy is built for fast array computations. We&#39;ll explore the package further in the coming weeks but for now let&#39;s simply create some NumPy arrays. The first step with any package is to import it:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n</code></pre>\n<p>We access functions and objects in the NumPy package using the dot notation <code>np.______</code> (and so the abbreviated name <code>np</code> is a convention which simplifies each call to the package).</p>\n<pre><code class=\"lang-python\">np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">11</span>)\n</code></pre>\n<pre><code>array([ <span class=\"hljs-number\">0.</span> ,  <span class=\"hljs-number\">0.1</span>,  <span class=\"hljs-number\">0.2</span>,  <span class=\"hljs-number\">0.3</span>,  <span class=\"hljs-number\">0.4</span>,  <span class=\"hljs-number\">0.5</span>,  <span class=\"hljs-number\">0.6</span>,  <span class=\"hljs-number\">0.7</span>,  <span class=\"hljs-number\">0.8</span>,  <span class=\"hljs-number\">0.9</span>,  <span class=\"hljs-number\">1.</span> ])\n</code></pre><p>We can view the documentation in our Jupyter notebook using a question mark such as:</p>\n<pre><code class=\"lang-python\">np.linspace?\n</code></pre>\n<p>All the usual mathematical functions are included in NumPy and are vectorized: they accept arrays as arguments and apply functions elementwise.</p>\n<pre><code class=\"lang-python\">x = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">11</span>)\ny = np.exp(x)\nprint(x)\nprint(y)\n</code></pre>\n<pre><code>[ <span class=\"hljs-number\">0.</span>   <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-number\">0.2</span>  <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-number\">0.4</span>  <span class=\"hljs-number\">0.5</span>  <span class=\"hljs-number\">0.6</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">0.8</span>  <span class=\"hljs-number\">0.9</span>  <span class=\"hljs-number\">1.</span> ]\n[ <span class=\"hljs-number\">1.</span>          <span class=\"hljs-number\">1.10517092</span>  <span class=\"hljs-number\">1.22140276</span>  <span class=\"hljs-number\">1.34985881</span>  <span class=\"hljs-number\">1.4918247</span>   <span class=\"hljs-number\">1.64872127</span>\n  <span class=\"hljs-number\">1.8221188</span>   <span class=\"hljs-number\">2.01375271</span>  <span class=\"hljs-number\">2.22554093</span>  <span class=\"hljs-number\">2.45960311</span>  <span class=\"hljs-number\">2.71828183</span>]\n</code></pre><p>matplotlib is a plotting library which is very similar to Matlab&#39;s plotting library. Let&#39;s import it with the statndard naming convention:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n</code></pre>\n<p>We need a bit of <a href=\"http://ipython.readthedocs.io/en/stable/interactive/magics.html\">magic</a>. The following tells the Jupyter notebook to output matplotlib figures <em>inline</em>.</p>\n<pre><code class=\"lang-python\">%matplotlib inline\n</code></pre>\n<p>Now plotting is as simple as:</p>\n<pre><code class=\"lang-python\">x = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">1000</span>)\ny = np.exp(<span class=\"hljs-number\">-0.1</span>*x) * np.cos(x)\nplt.plot(x,y)\n</code></pre>\n<pre><code><span class=\"hljs-meta\">[&lt;matplotlib.lines.Line2D at 0x10f55f7f0&gt;]</span>\n</code></pre><p><img src=\"output_88_1.png\" alt=\"png\"></p>\n<h3 id=\"exercise-3-1-plotting-mathematical-functions\">Exercise 3.1: Plotting mathematical functions</h3>\n<ol>\n<li>Plot the function $f(x) = 1 - x^2$ for $x \\in [-2,2]$.</li>\n<li>Plot the function $f(x) = \\arctan x$ for $x \\in [-5,5]$.</li>\n<li>Plot the parametic curve $x(t) = \\cos 3t$, $y(t) = \\sin 2t$ for $t \\in [0,2 \\pi]$.</li>\n</ol>\n","2016-08-10-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks/2016-08-10-notes/2016-08-10-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"august-10-2016\">August 10, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<p>A tour of the SciPy stack:</p>\n<ol>\n<li>Plotting with NumPy arrays and matplotlib</li>\n<li>Linear algebra in SciPy</li>\n<li>Data analysis in pandas</li>\n</ol>\n<h3 id=\"the-scipy-stack\">The SciPy Stack</h3>\n<p>Scientific computing in Python is built a collection of Python packages known as the SciPy stack:</p>\n<ul>\n<li><a href=\"http://www.numpy.org/\">NumPy</a> provides fast array computations</li>\n<li><a href=\"http://matplotlib.org/\">matplotlib</a> is a plotting library</li>\n<li><a href=\"http://scipy.org/\">SciPy</a> is a library of common mathematical/statistical functions and objects</li>\n<li><a href=\"http://pandas.pydata.org/\">pandas</a> provides essential datatypes and tools for data analysis</li>\n</ul>\n<p>Let&#39;s begin with NumPy and matplotlib. Recall, when using a package, we <a href=\"https://docs.python.org/3/reference/import.html\">import</a> it with the <code>import</code> keyword and access its functions/objects with the dot syntax.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n%matplotlib inline\n</code></pre>\n<h3 id=\"1-plotting-functions-with-numpy-arrays-and-matplotlib\">1. Plotting functions with NumPy arrays and matplotlib</h3>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Plot the function $y = e^{-0.1 x^2} \\cos(10x)$ on the interval $[-10,10]$.</p>\n<p>See the <a href=\"http://matplotlib.org/api/pyplot_summary.html\">pyplot API documentation</a> to see a summary of the pyplot commands.</p>\n<pre><code class=\"lang-python\">x = np.linspace(<span class=\"hljs-number\">-10</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">1000</span>)\ny = np.exp(<span class=\"hljs-number\">-0.1</span>*x**<span class=\"hljs-number\">2</span>) * np.cos(<span class=\"hljs-number\">10</span>*x)\n\nplt.figure(figsize=(<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\"># Specifiy the size of the figure</span>\nplt.plot(x,y,color=(<span class=\"hljs-number\">0.2</span>,<span class=\"hljs-number\">0.4</span>,<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\"># Specify the color as RGB tuple</span>\nplt.grid(<span class=\"hljs-string\">'on'</span>), plt.xlim([<span class=\"hljs-number\">-10</span>,<span class=\"hljs-number\">10</span>]), plt.ylim([<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\"># Turn on the grid and set the x and y display limits</span>\nplt.xlabel(<span class=\"hljs-string\">'x values'</span>), plt.ylabel(<span class=\"hljs-string\">'y values'</span>), plt.title(<span class=\"hljs-string\">'Decaying Cosine Wave'</span>); <span class=\"hljs-comment\"># Add labels and a title</span>\n</code></pre>\n<p><img src=\"output_4_0.png\" alt=\"png\"></p>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Plot the parametric curve $x(t) = \\cos 3t$ and $y(t) = \\sin(2t)$ for $t \\in [0,2 \\pi]$.</p>\n<pre><code class=\"lang-python\">t = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>*np.pi,<span class=\"hljs-number\">1000</span>)\nx = np.cos(<span class=\"hljs-number\">3</span>*t)\ny = np.sin(<span class=\"hljs-number\">2</span>*t)\nplt.plot(x,y);\n</code></pre>\n<p><img src=\"output_6_0.png\" alt=\"png\"></p>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Plot the <a href=\"https://en.wikipedia.org/wiki/Butterfly_curve_%28transcendental%29\">butterfly curve</a> with variable parameters:</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/6a17a33d739ede62a269949b5bf551a875397102\" alt=\"x coordinate butterfly curve\">\n<img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/92e1ec07900777c282b5c379b0877906f4594727\" alt=\"y coordinate butterfly curve\"></p>\n<pre><code class=\"lang-python\">a = <span class=\"hljs-number\">12</span>\nk = <span class=\"hljs-number\">2</span>\nt = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">1000</span>)\nx = np.sin(t) * (np.exp(np.cos(t)) - <span class=\"hljs-number\">2</span>*np.cos(a*t) - np.sin(t/<span class=\"hljs-number\">12</span>)**k)\ny = np.cos(t) * (np.exp(np.cos(t)) - <span class=\"hljs-number\">2</span>*np.cos(a*t) - np.sin(t/<span class=\"hljs-number\">12</span>)**k)\nplt.plot(x,y)\nplt.axis(<span class=\"hljs-string\">'equal'</span>)\nplt.show()\n</code></pre>\n<p><img src=\"output_8_0.png\" alt=\"png\"></p>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Plot the degree 1, 3, and 5 Taylor series of $\\sin x$ on the interval $[-3,3]$. Recall, the Taylor series of $\\sin x$ is</p>\n<p>$$\n\\sin x = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\cdots\n$$</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Degree 1 T1(x) = x</span>\n<span class=\"hljs-comment\"># Degree 3 T3(x) = x - x^3 / 6</span>\n<span class=\"hljs-comment\"># Degree 5 T3(x) = x - x^3 / 3! + x^5 / 5!</span>\nx = np.linspace(<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1000</span>)\ny = np.sin(x)\ny1 = x\ny3 = y1 - x**<span class=\"hljs-number\">3</span> / (<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1</span>)\ny5 = y3 + x**<span class=\"hljs-number\">5</span> / (<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">4</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1</span>)\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">5</span>))\nplt.plot(x,y,x,y1,x,y3,x,y5)\nplt.title(<span class=\"hljs-string\">'Taylor Polynomials of $\\sin x$'</span>)\nplt.legend([<span class=\"hljs-string\">'sin(x)'</span>,<span class=\"hljs-string\">'Degree 1'</span>, <span class=\"hljs-string\">'Degree 3'</span>,<span class=\"hljs-string\">'Degree 5'</span>],loc=<span class=\"hljs-number\">4</span>);\n</code></pre>\n<p><img src=\"output_10_0.png\" alt=\"png\"></p>\n<h3 id=\"2-linear-algebra-with-scipy\">2. Linear algebra with SciPy</h3>\n<p>See the <a href=\"http://docs.scipy.org/doc/scipy/reference/tutorial/linalg.html\">SciPy documentation</a> for a summary of the linear algebra functions and objects provided by SciPy. As usual, we need to import the package before we use it:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> scipy.linalg <span class=\"hljs-keyword\">as</span> la\n</code></pre>\n<p>Before we get started, we need to emphasize the <a href=\"http://docs.scipy.org/doc/scipy/reference/tutorial/linalg.html#numpy-matrix-vs-2d-numpy-ndarray\">difference between NumPy arrays and NumPy matrices</a>. A NumPy array is an array of numbers and operations are always computed elementwise!</p>\n<pre><code class=\"lang-python\">A = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]]) <span class=\"hljs-comment\"># Create a NumPy array</span>\nA\n</code></pre>\n<pre><code>array(<span class=\"hljs-string\">[[1, 2],\n       [3, 4]]</span>)\n</code></pre><pre><code class=\"lang-python\">type(A)\n</code></pre>\n<pre><code><span class=\"hljs-selector-tag\">numpy</span><span class=\"hljs-selector-class\">.ndarray</span>\n</code></pre><pre><code class=\"lang-python\">A * A <span class=\"hljs-comment\"># Compute the square of each element in the array</span>\n</code></pre>\n<pre><code>array(<span class=\"hljs-string\">[[ 1,  4],\n       [ 9, 16]]</span>)\n</code></pre><pre><code class=\"lang-python\">M = np.matrix([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]]) <span class=\"hljs-comment\"># Create a NumPy matrix</span>\nM\n</code></pre>\n<pre><code>matrix(<span class=\"hljs-string\">[[1, 2],\n        [3, 4]]</span>)\n</code></pre><pre><code class=\"lang-python\">type(M)\n</code></pre>\n<pre><code>numpy<span class=\"hljs-selector-class\">.matrixlib</span><span class=\"hljs-selector-class\">.defmatrix</span><span class=\"hljs-selector-class\">.matrix</span>\n</code></pre><pre><code class=\"lang-python\">M * M <span class=\"hljs-comment\"># Compute matrix multiplication</span>\n</code></pre>\n<pre><code>matrix(<span class=\"hljs-string\">[[ 7, 10],\n        [15, 22]]</span>)\n</code></pre><p>Always be aware of the dataype we&#39;re working with!</p>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Find the determinant, eigenvalues and eigenvectors of the matrix $A = \\begin{bmatrix} 1 &amp; 2 &amp; 1 \\ 4 &amp; 2 &amp; -3 \\ 0 &amp; -5 &amp; -1 \\end{bmatrix}$.</p>\n<pre><code class=\"lang-python\">A = np.matrix([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">-3</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-5</span>,<span class=\"hljs-number\">-1</span>]])\nA\n</code></pre>\n<pre><code>matrix([[ <span class=\"hljs-number\">1</span>,  <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">1</span>],\n        [ <span class=\"hljs-number\">4</span>,  <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-3</span>],\n        [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">-1</span>]])\n</code></pre><pre><code class=\"lang-python\">type(A)\n</code></pre>\n<pre><code>numpy<span class=\"hljs-selector-class\">.matrixlib</span><span class=\"hljs-selector-class\">.defmatrix</span><span class=\"hljs-selector-class\">.matrix</span>\n</code></pre><pre><code class=\"lang-python\">la.det(A) <span class=\"hljs-comment\"># Compute the determinant</span>\n</code></pre>\n<pre><code><span class=\"hljs-selector-tag\">-29</span><span class=\"hljs-selector-class\">.0</span>\n</code></pre><pre><code class=\"lang-python\">evals, evecs = la.eig(A) <span class=\"hljs-comment\"># Compute eigenvalues and eigenvectors</span>\nprint(<span class=\"hljs-string\">\"Eigenvalues of A:\"</span>, <span class=\"hljs-string\">\"\\n\\n\"</span>, np.real(evals))\nprint()\nprint(<span class=\"hljs-string\">\"Eigenvectors of A:\"</span>, <span class=\"hljs-string\">\"\\n\\n\"</span>, evecs)\n</code></pre>\n<pre><code>Eigenvalues of <span class=\"hljs-keyword\">A</span>: \n\n [ <span class=\"hljs-number\">5.43436462</span>  <span class=\"hljs-number\">1.16120709</span> -<span class=\"hljs-number\">4.5955717</span> ]\n\nEigenvectors of <span class=\"hljs-keyword\">A</span>: \n\n [[-<span class=\"hljs-number\">0.21277719</span>  <span class=\"hljs-number\">0.61090902</span> -<span class=\"hljs-number\">0.33351363</span>]\n [-<span class=\"hljs-number\">0.7715384</span>  -<span class=\"hljs-number\">0.31411793</span>  <span class=\"hljs-number\">0.55040399</span>]\n [ <span class=\"hljs-number\">0.59954513</span>  <span class=\"hljs-number\">0.72671872</span>  <span class=\"hljs-number\">0.76539147</span>]]\n</code></pre><p>Let&#39;s verify that $A v_1 = \\lambda_1 v_1$ for the first eigenpair $(\\lambda_1,v_1)$.</p>\n<pre><code class=\"lang-python\">P = np.matrix(evecs) <span class=\"hljs-comment\"># The matrix of eigenvectors</span>\nP\n</code></pre>\n<pre><code>matrix([[-<span class=\"hljs-number\">0.21277719</span>,  <span class=\"hljs-number\">0.61090902</span>, -<span class=\"hljs-number\">0.33351363</span>],\n        [-<span class=\"hljs-number\">0.7715384</span> , -<span class=\"hljs-number\">0.31411793</span>,  <span class=\"hljs-number\">0.55040399</span>],\n        [ <span class=\"hljs-number\">0.59954513</span>,  <span class=\"hljs-number\">0.72671872</span>,  <span class=\"hljs-number\">0.76539147</span>]])\n</code></pre><pre><code class=\"lang-python\">v1 = P[:,<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\"># The first eigenvector</span>\nv1\n</code></pre>\n<pre><code>matrix(<span class=\"hljs-string\">[[-0.21277719],\n        [-0.7715384 ],\n        [ 0.59954513]]</span>)\n</code></pre><pre><code class=\"lang-python\">s = np.real(evals) <span class=\"hljs-comment\"># The array of eigenvalues</span>\ns\n</code></pre>\n<pre><code>array([ <span class=\"hljs-number\">5.43436462</span>,  <span class=\"hljs-number\">1.16120709</span>, -<span class=\"hljs-number\">4.5955717</span> ])\n</code></pre><pre><code class=\"lang-python\">s1 = s[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\"># The first eigenvalue</span>\ns1\n</code></pre>\n<pre><code>5<span class=\"hljs-selector-class\">.4343646192384165</span>\n</code></pre><p>Compute $A v_1$:</p>\n<pre><code class=\"lang-python\">A * v1\n</code></pre>\n<pre><code>matrix(<span class=\"hljs-string\">[[-1.15630886],\n        [-4.19282097],\n        [ 3.25814686]]</span>)\n</code></pre><p>Now compute $\\lambda_1 v_1$</p>\n<pre><code class=\"lang-python\">s1 * v1\n</code></pre>\n<pre><code>matrix(<span class=\"hljs-string\">[[-1.15630886],\n        [-4.19282097],\n        [ 3.25814686]]</span>)\n</code></pre><p>Let&#39;s see the diagonlization of $A$:</p>\n<pre><code class=\"lang-python\">D = np.matrix(np.diag(np.real(evals)))\nD\n</code></pre>\n<pre><code>matrix([[ <span class=\"hljs-number\">5.43436462</span>,  <span class=\"hljs-number\">0.</span>        ,  <span class=\"hljs-number\">0.</span>        ],\n        [ <span class=\"hljs-number\">0.</span>        ,  <span class=\"hljs-number\">1.16120709</span>,  <span class=\"hljs-number\">0.</span>        ],\n        [ <span class=\"hljs-number\">0.</span>        ,  <span class=\"hljs-number\">0.</span>        , <span class=\"hljs-number\">-4.5955717</span> ]])\n</code></pre><pre><code class=\"lang-python\">P * D * P**(<span class=\"hljs-number\">-1</span>)\n</code></pre>\n<pre><code>matrix([[  1.00000000e<span class=\"hljs-string\">+00</span>,   2.00000000e<span class=\"hljs-string\">+00</span>,   1.00000000e<span class=\"hljs-string\">+00</span>],\n        [  4.00000000e<span class=\"hljs-string\">+00</span>,   2.00000000e<span class=\"hljs-string\">+00</span>,  <span class=\"hljs-string\">-3</span>.00000000e<span class=\"hljs-string\">+00</span>],\n        [ <span class=\"hljs-string\">-7</span>.52114818e<span class=\"hljs-string\">-16</span>,  <span class=\"hljs-string\">-5</span>.00000000e<span class=\"hljs-string\">+00</span>,  <span class=\"hljs-string\">-1</span>.00000000e<span class=\"hljs-string\">+00</span>]])\n</code></pre><p>Let&#39;s round the result to see the matrix $A$ more clearly:</p>\n<pre><code class=\"lang-python\">np.round(P * D * P**(<span class=\"hljs-number\">-1</span>))\n</code></pre>\n<pre><code>matrix([[ <span class=\"hljs-number\">1.</span>,  <span class=\"hljs-number\">2.</span>,  <span class=\"hljs-number\">1.</span>],\n        [ <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">-3.</span>],\n        [<span class=\"hljs-number\">-0.</span>, <span class=\"hljs-number\">-5.</span>, <span class=\"hljs-number\">-1.</span>]])\n</code></pre><pre><code class=\"lang-python\">A\n</code></pre>\n<pre><code>matrix([[ <span class=\"hljs-number\">1</span>,  <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">1</span>],\n        [ <span class=\"hljs-number\">4</span>,  <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-3</span>],\n        [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">-1</span>]])\n</code></pre><h4 id=\"example\">EXAMPLE</h4>\n<p>Suppose $M$ is a 2 by 2 matrix with random entries sampled uniformly from $[0,1]$. How are the (real) eigenvalues of the symmetric matrix $A = M M^T$ distributed? Compute a random sample of such matrices and plot the eigenvalues in a scatter plot.</p>\n<pre><code class=\"lang-python\">ev1 = np.array([])\nev2 = np.array([])\n\n<span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10000</span>):\n    M = np.matrix(np.random.random([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>]))\n    A = M * M.T\n    evals, evecs = la.eig(A)\n    evals = np.real(evals)\n    ev1 = np.append(ev1,np.max(evals))\n    ev2 = np.append(ev2,np.min(evals))\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>))\nplt.plot(ev1,ev2,<span class=\"hljs-string\">'.'</span>,alpha=<span class=\"hljs-number\">0.3</span>)\nplt.axis(<span class=\"hljs-string\">'equal'</span>)\nplt.grid(<span class=\"hljs-string\">'on'</span>)\nplt.title(<span class=\"hljs-string\">'Distribution of Random Eigenvalues'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Maximum eigenvalue'</span>), plt.ylabel(<span class=\"hljs-string\">'Minimum eigenvalue'</span>);\n</code></pre>\n<p><img src=\"output_42_0.png\" alt=\"png\"></p>\n<h3 id=\"3-data-analysis-with-pandas\">3. Data analysis with pandas</h3>\n<p>The main object we&#39;ll be dealing with in the pandas library is the <a href=\"\">DataFrame</a>. The <a href=\"http://pandas.pydata.org/\">documentation</a> for pandas is extensive. Check it out!</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n</code></pre>\n<p>One of the great features of pandas is its robust I/O Tools. Check out the documentation for the <a href=\"http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table\">read_csv</a> method. Let&#39;s import a <code>.csv</code> file containing weather data recorded at the Vancouver International Airport from 2010 to 2016.</p>\n<pre><code class=\"lang-python\">wind = pd.read_csv(<span class=\"hljs-string\">'wind.csv'</span>)\n</code></pre>\n<pre><code class=\"lang-python\">type(wind)\n</code></pre>\n<pre><code>pandas<span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.frame</span><span class=\"hljs-selector-class\">.DataFrame</span>\n</code></pre><p>Now that we have the <code>.csv</code> file loaded as a pandas DataFrame, let&#39;s look at the data. The <code>.head()</code>, <code>.tail()</code> and <code>.info()</code> are always a great first step in exploring a dataset.</p>\n<pre><code class=\"lang-python\">wind.head()\n</code></pre>\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Hour</th>\n      <th>Pressure</th>\n      <th>Wind Direction</th>\n      <th>Wind Speed</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>100.87</td>\n      <td>E</td>\n      <td>22.0</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>100.81</td>\n      <td>E</td>\n      <td>19.0</td>\n      <td>5.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>100.77</td>\n      <td>E</td>\n      <td>26.0</td>\n      <td>5.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>100.69</td>\n      <td>ESE</td>\n      <td>26.0</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>100.58</td>\n      <td>ESE</td>\n      <td>26.0</td>\n      <td>5.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre><code class=\"lang-python\">wind.tail()\n</code></pre>\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Hour</th>\n      <th>Pressure</th>\n      <th>Wind Direction</th>\n      <th>Wind Speed</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>54774</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>7</td>\n      <td>102.15</td>\n      <td>ENE</td>\n      <td>4.0</td>\n      <td>8.7</td>\n    </tr>\n    <tr>\n      <th>54775</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>8</td>\n      <td>102.15</td>\n      <td>ESE</td>\n      <td>17.0</td>\n      <td>10.1</td>\n    </tr>\n    <tr>\n      <th>54776</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>9</td>\n      <td>102.15</td>\n      <td>ESE</td>\n      <td>11.0</td>\n      <td>11.7</td>\n    </tr>\n    <tr>\n      <th>54777</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>10</td>\n      <td>102.15</td>\n      <td>SE</td>\n      <td>10.0</td>\n      <td>13.5</td>\n    </tr>\n    <tr>\n      <th>54778</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>11</td>\n      <td>102.15</td>\n      <td>SSW</td>\n      <td>13.0</td>\n      <td>13.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre><code class=\"lang-python\">wind.info()\n</code></pre>\n<pre><code>&lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">pandas</span>.<span class=\"hljs-title\">core</span>.<span class=\"hljs-title\">frame</span>.<span class=\"hljs-title\">DataFrame</span>'<span class=\"hljs-title\">&gt;</span></span>\n<span class=\"hljs-type\">RangeIndex</span>: <span class=\"hljs-number\">54779</span> entries, <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">54778</span>\n<span class=\"hljs-type\">Data</span> columns (total <span class=\"hljs-number\">8</span> columns):\n<span class=\"hljs-type\">Year</span>              <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Month</span>             <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Day</span>               <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Hour</span>              <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Pressure</span>          <span class=\"hljs-number\">54776</span> non-<span class=\"hljs-literal\">null</span> float64\n<span class=\"hljs-type\">Wind</span> <span class=\"hljs-type\">Direction</span>    <span class=\"hljs-number\">53180</span> non-<span class=\"hljs-literal\">null</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span></span>\n<span class=\"hljs-type\">Wind</span> <span class=\"hljs-type\">Speed</span>        <span class=\"hljs-number\">54777</span> non-<span class=\"hljs-literal\">null</span> float64\n<span class=\"hljs-type\">Temperature</span>       <span class=\"hljs-number\">54777</span> non-<span class=\"hljs-literal\">null</span> float64\ndtypes: float64(<span class=\"hljs-number\">3</span>), int64(<span class=\"hljs-number\">4</span>), <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span>(<span class=\"hljs-params\">1</span>)</span>\nmemory usage: <span class=\"hljs-number\">3.3</span>+ <span class=\"hljs-type\">MB</span>\n</code></pre><p>We can select the columns of a DataFrame by the bracket notation <code>[ ]</code> with the column name.</p>\n<pre><code class=\"lang-python\">wind[<span class=\"hljs-string\">'Wind Speed'</span>].head(<span class=\"hljs-number\">10</span>)\n</code></pre>\n<pre><code>0    22<span class=\"hljs-selector-class\">.0</span>\n1    19<span class=\"hljs-selector-class\">.0</span>\n2    26<span class=\"hljs-selector-class\">.0</span>\n3    26<span class=\"hljs-selector-class\">.0</span>\n4    26<span class=\"hljs-selector-class\">.0</span>\n5    19<span class=\"hljs-selector-class\">.0</span>\n6    13<span class=\"hljs-selector-class\">.0</span>\n7    19<span class=\"hljs-selector-class\">.0</span>\n8    22<span class=\"hljs-selector-class\">.0</span>\n9    30<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">Name</span>: <span class=\"hljs-selector-tag\">Wind</span> <span class=\"hljs-selector-tag\">Speed</span>, <span class=\"hljs-selector-tag\">dtype</span>: <span class=\"hljs-selector-tag\">float64</span>\n</code></pre><h4 id=\"example\">EXAMPLE</h4>\n<p>Plot the hourly temperature from April 2015 as line plot and the wind speed as a historgram.</p>\n<p>As a first step, we can select the data from April 2015 with Boolean indexing:</p>\n<pre><code class=\"lang-python\">april_wind = wind[(wind[<span class=\"hljs-string\">'Year'</span>] == <span class=\"hljs-number\">2015</span>) &amp; (wind[<span class=\"hljs-string\">'Month'</span>] == <span class=\"hljs-number\">4</span>)]\n</code></pre>\n<pre><code class=\"lang-python\">april_wind.head()\n</code></pre>\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Hour</th>\n      <th>Pressure</th>\n      <th>Wind Direction</th>\n      <th>Wind Speed</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>45983</th>\n      <td>2015</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>102.03</td>\n      <td>W</td>\n      <td>13.0</td>\n      <td>8.3</td>\n    </tr>\n    <tr>\n      <th>45984</th>\n      <td>2015</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>102.08</td>\n      <td>NNW</td>\n      <td>8.0</td>\n      <td>7.2</td>\n    </tr>\n    <tr>\n      <th>45985</th>\n      <td>2015</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>102.11</td>\n      <td>WNW</td>\n      <td>17.0</td>\n      <td>6.8</td>\n    </tr>\n    <tr>\n      <th>45986</th>\n      <td>2015</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>102.14</td>\n      <td>WNW</td>\n      <td>16.0</td>\n      <td>6.7</td>\n    </tr>\n    <tr>\n      <th>45987</th>\n      <td>2015</td>\n      <td>4</td>\n      <td>1</td>\n      <td>4</td>\n      <td>102.17</td>\n      <td>WNW</td>\n      <td>13.0</td>\n      <td>5.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>Plotting the temperature and wind speed over April 2015 is as simple as as selecting the column and then chaining the <code>.plot()</code> method (which is built on top of matplotlib):</p>\n<pre><code class=\"lang-python\">april_wind[<span class=\"hljs-string\">'Temperature'</span>].plot(title=<span class=\"hljs-string\">'April 2015 Temperature (Deg C)'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-selector-class\">.axes</span>._subplots<span class=\"hljs-selector-class\">.AxesSubplot</span> at <span class=\"hljs-number\">0</span>x7fe84dce3b38&gt;\n</code></pre><p><img src=\"output_58_1.png\" alt=\"png\"></p>\n<pre><code class=\"lang-python\">april_wind[<span class=\"hljs-string\">'Wind Speed'</span>].hist(bins=<span class=\"hljs-number\">15</span>)\n<span class=\"hljs-comment\"># .hist creates a matplotlib figure</span>\n<span class=\"hljs-comment\"># and so we can use pyplot commands on the current figure</span>\nplt.title(<span class=\"hljs-string\">'Hourly Wind Speed Distribution'</span>);\n</code></pre>\n<p><img src=\"output_59_0.png\" alt=\"png\"></p>\n<h4 id=\"example\">EXAMPLE</h4>\n<p>Plot a bar chart showing the number of hourly wind direction measurements (in the entire DataFrame) for each direction: E, ESE, SE, SSE, S, etc.</p>\n<pre><code class=\"lang-python\">wind[<span class=\"hljs-string\">'Wind Direction'</span>].unique()\n</code></pre>\n<pre><code><span class=\"hljs-keyword\">array</span>([<span class=\"hljs-string\">'E'</span>, <span class=\"hljs-string\">'ESE'</span>, <span class=\"hljs-string\">'SE'</span>, <span class=\"hljs-string\">'SSE'</span>, <span class=\"hljs-string\">'S'</span>, <span class=\"hljs-string\">'ENE'</span>, <span class=\"hljs-string\">'NNW'</span>, <span class=\"hljs-string\">'WNW'</span>, <span class=\"hljs-string\">'SW'</span>, <span class=\"hljs-string\">'SSW'</span>, nan,\n       <span class=\"hljs-string\">'W'</span>, <span class=\"hljs-string\">'NW'</span>, <span class=\"hljs-string\">'N'</span>, <span class=\"hljs-string\">'WSW'</span>, <span class=\"hljs-string\">'NE'</span>, <span class=\"hljs-string\">'NNE'</span>], dtype=<span class=\"hljs-keyword\">object</span>)\n</code></pre><p>The <a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html\">groupby</a> method splits the DataFrame into sub-DataFrames acording to the values in the specified column and then we can apply a function. For example, to simply count the number of measurements (rows) in each direction, we can enter:</p>\n<pre><code class=\"lang-python\">wind.groupby(<span class=\"hljs-string\">'Wind Direction'</span>).size().plot(kind=<span class=\"hljs-string\">'bar'</span>,title=<span class=\"hljs-string\">'Hourly Wind Direction Measurements'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-selector-class\">.axes</span>._subplots<span class=\"hljs-selector-class\">.AxesSubplot</span> at <span class=\"hljs-number\">0</span>x7fe8545f9a90&gt;\n</code></pre><p><img src=\"output_63_1.png\" alt=\"png\"></p>\n","2016-08-17-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks/2016-08-17-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"august-17-2016\">August 17, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<ol>\n<li>SciPy Example: Fitting Wind Speed Distributions to the Weibull Distribution</li>\n<li>A tour of scikit-learn (by examples)</li>\n</ol>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n%matplotlib inline\n</code></pre>\n<h3 id=\"1-scipy-example-fitting-wind-speed-distributions-to-the-weibull-distribution\">1. SciPy Example: Fitting Wind Speed Distributions to the Weibull Distribution</h3>\n<p>It is well-known in the <a href=\"http://wind-data.ch/tools/weibull.php?lng=en\">wind energy industry</a> that wind speed distributions (measured in m/s) are modelled by the <a href=\"https://en.wikipedia.org/wiki/Weibull_distribution\">Weibull distribution</a>:</p>\n<p><img src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/847f7f8870ffa9eabda2b09dc503ff4cb7753695\" alt=\"weibull\"></p>\n<p>where, in the case of wind speed, the independent variable $x$ is wind speed measured in m/s, the coefficient $\\lambda$ is approximately equal to the average wind speed and $k$ is usually in the range [1,2].</p>\n<p>Let&#39;s plot the wind speed distribution at the Vancouver Airport using pandas and matplotlib, and fit the distribution to the Weibull distribution using SciPy.</p>\n<h4 id=\"plot-the-wind-speed-distribution\">Plot the wind speed distribution</h4>\n<pre><code class=\"lang-python\">wind = pd.read_csv(<span class=\"hljs-string\">\"2016-08-10-notes/wind.csv\"</span>)\n</code></pre>\n<pre><code class=\"lang-python\">wind.head()\n</code></pre>\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Hour</th>\n      <th>Pressure</th>\n      <th>Wind Direction</th>\n      <th>Wind Speed</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>100.87</td>\n      <td>E</td>\n      <td>22.0</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>100.81</td>\n      <td>E</td>\n      <td>19.0</td>\n      <td>5.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>100.77</td>\n      <td>E</td>\n      <td>26.0</td>\n      <td>5.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>100.69</td>\n      <td>ESE</td>\n      <td>26.0</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>100.58</td>\n      <td>ESE</td>\n      <td>26.0</td>\n      <td>5.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre><code class=\"lang-python\">wind.tail()\n</code></pre>\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>Hour</th>\n      <th>Pressure</th>\n      <th>Wind Direction</th>\n      <th>Wind Speed</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>54774</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>7</td>\n      <td>102.15</td>\n      <td>ENE</td>\n      <td>4.0</td>\n      <td>8.7</td>\n    </tr>\n    <tr>\n      <th>54775</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>8</td>\n      <td>102.15</td>\n      <td>ESE</td>\n      <td>17.0</td>\n      <td>10.1</td>\n    </tr>\n    <tr>\n      <th>54776</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>9</td>\n      <td>102.15</td>\n      <td>ESE</td>\n      <td>11.0</td>\n      <td>11.7</td>\n    </tr>\n    <tr>\n      <th>54777</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>10</td>\n      <td>102.15</td>\n      <td>SE</td>\n      <td>10.0</td>\n      <td>13.5</td>\n    </tr>\n    <tr>\n      <th>54778</th>\n      <td>2016</td>\n      <td>4</td>\n      <td>1</td>\n      <td>11</td>\n      <td>102.15</td>\n      <td>SSW</td>\n      <td>13.0</td>\n      <td>13.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre><code class=\"lang-python\">wind.info()\n</code></pre>\n<pre><code>&lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> '<span class=\"hljs-title\">pandas</span>.<span class=\"hljs-title\">core</span>.<span class=\"hljs-title\">frame</span>.<span class=\"hljs-title\">DataFrame</span>'<span class=\"hljs-title\">&gt;</span></span>\n<span class=\"hljs-type\">RangeIndex</span>: <span class=\"hljs-number\">54779</span> entries, <span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">54778</span>\n<span class=\"hljs-type\">Data</span> columns (total <span class=\"hljs-number\">8</span> columns):\n<span class=\"hljs-type\">Year</span>              <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Month</span>             <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Day</span>               <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Hour</span>              <span class=\"hljs-number\">54779</span> non-<span class=\"hljs-literal\">null</span> int64\n<span class=\"hljs-type\">Pressure</span>          <span class=\"hljs-number\">54776</span> non-<span class=\"hljs-literal\">null</span> float64\n<span class=\"hljs-type\">Wind</span> <span class=\"hljs-type\">Direction</span>    <span class=\"hljs-number\">53180</span> non-<span class=\"hljs-literal\">null</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span></span>\n<span class=\"hljs-type\">Wind</span> <span class=\"hljs-type\">Speed</span>        <span class=\"hljs-number\">54777</span> non-<span class=\"hljs-literal\">null</span> float64\n<span class=\"hljs-type\">Temperature</span>       <span class=\"hljs-number\">54777</span> non-<span class=\"hljs-literal\">null</span> float64\ndtypes: float64(<span class=\"hljs-number\">3</span>), int64(<span class=\"hljs-number\">4</span>), <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span>(<span class=\"hljs-params\">1</span>)</span>\nmemory usage: <span class=\"hljs-number\">3.3</span>+ <span class=\"hljs-type\">MB</span>\n</code></pre><p>Since we&#39;re only interested in wind speed, we can select the &quot;Wind Speed&quot; column:</p>\n<pre><code class=\"lang-python\">wind_speed = wind[<span class=\"hljs-string\">\"Wind Speed\"</span>]\nwind_speed.head()\n</code></pre>\n<pre><code>0    22<span class=\"hljs-selector-class\">.0</span>\n1    19<span class=\"hljs-selector-class\">.0</span>\n2    26<span class=\"hljs-selector-class\">.0</span>\n3    26<span class=\"hljs-selector-class\">.0</span>\n4    26<span class=\"hljs-selector-class\">.0</span>\n<span class=\"hljs-selector-tag\">Name</span>: <span class=\"hljs-selector-tag\">Wind</span> <span class=\"hljs-selector-tag\">Speed</span>, <span class=\"hljs-selector-tag\">dtype</span>: <span class=\"hljs-selector-tag\">float64</span>\n</code></pre><p>Notice that wind speed is measured in km/h in this dataset. Let&#39;s check to see if there are any missing values:</p>\n<pre><code class=\"lang-python\">wind_speed[wind_speed.isnull()]\n</code></pre>\n<pre><code><span class=\"hljs-number\">6166</span>   NaN\n<span class=\"hljs-number\">6361</span>   NaN\n<span class=\"hljs-built_in\">Name</span>: <span class=\"hljs-built_in\">Wind</span> <span class=\"hljs-built_in\">Speed</span>, dtype: float64\n</code></pre><p>There are only 2 missing values and we can fill them in with the values from the previous measurement using the <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html\">fillna</a> DataFrame method:</p>\n<pre><code class=\"lang-python\">wind_speed = wind_speed.fillna(method=<span class=\"hljs-string\">'ffill'</span>)\n</code></pre>\n<p>To plot the wind speed distribution, we can plot a <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist\">histogram</a> of wind speeds with bins of size 4 km/h up to the maximum wind speed:</p>\n<pre><code class=\"lang-python\">wind_speed.max()\n</code></pre>\n<pre><code>78<span class=\"hljs-selector-class\">.0</span>\n</code></pre><pre><code class=\"lang-python\">data, bins, _ = plt.hist(wind_speed,bins=np.arange(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">82</span>,<span class=\"hljs-number\">4</span>),normed=<span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p><img src=\"output_16_0.png\" alt=\"png\"></p>\n<p>The output of the matplotlib.pyplot function <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist\">hist</a> is a tuple with three entries: the frequency for each bin, the edges of each bin, and (silent) list of patches (which we don&#39;t need). We&#39;ve unpacked these into variables <code>data</code> and <code>bins</code> (and forgotten the patches <code>_</code>). Notice that we used the keyword argument <code>normed=True</code> to get the frequency as a fraction instead of a hard count of the wind speed data.</p>\n<pre><code class=\"lang-python\">data\n</code></pre>\n<pre><code>array([  <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">87298052</span>e-<span class=\"hljs-number\">02</span>,   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">87093594</span>e-<span class=\"hljs-number\">02</span>,   <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">19724712</span>e-<span class=\"hljs-number\">02</span>,\n         <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">90790266</span>e-<span class=\"hljs-number\">02</span>,   <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">48217383</span>e-<span class=\"hljs-number\">02</span>,   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">00852516</span>e-<span class=\"hljs-number\">02</span>,\n         <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">11447818</span>e-<span class=\"hljs-number\">02</span>,   <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">01911316</span>e-<span class=\"hljs-number\">03</span>,   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">44969788</span>e-<span class=\"hljs-number\">03</span>,\n         <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">75249639</span>e-<span class=\"hljs-number\">03</span>,   <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">03630953</span>e-<span class=\"hljs-number\">04</span>,   <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">79601672</span>e-<span class=\"hljs-number\">04</span>,\n         <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">14901696</span>e-<span class=\"hljs-number\">04</span>,   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">41881013</span>e-<span class=\"hljs-number\">04</span>,   <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">09531025</span>e-<span class=\"hljs-number\">04</span>,\n         <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">56379269</span>e-<span class=\"hljs-number\">05</span>,   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">73827562</span>e-<span class=\"hljs-number\">05</span>,   <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">12758539</span>e-<span class=\"hljs-number\">06</span>,\n         <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00000000</span>e+<span class=\"hljs-number\">00</span>,   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">56379269</span>e-<span class=\"hljs-number\">06</span>])\n</code></pre><pre><code class=\"lang-python\">bins\n</code></pre>\n<pre><code>array([ <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">4</span>,  <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">52</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">64</span>,\n       <span class=\"hljs-number\">68</span>, <span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">80</span>])\n</code></pre><h4 id=\"fit-the-wind-speed-distribution-to-the-weibull-distribution\">Fit the wind speed distribution to the Weibull distribution</h4>\n<p>The data that we want to fit is given by the NumPy array <code>data</code> however we want to prepend a data point to the array to represent 0 frequency at wind speed 0.</p>\n<pre><code class=\"lang-python\">Y = np.append(<span class=\"hljs-number\">0</span>,data)\nprint(Y)\n</code></pre>\n<pre><code>[  <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00000000</span>e+<span class=\"hljs-number\">00</span>   <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">87298052</span>e-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">87093594</span>e-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">19724712</span>e-<span class=\"hljs-number\">02</span>\n   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">90790266</span>e-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">48217383</span>e-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">00852516</span>e-<span class=\"hljs-number\">02</span>   <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">11447818</span>e-<span class=\"hljs-number\">02</span>\n   <span class=\"hljs-number\">7</span>.<span class=\"hljs-number\">01911316</span>e-<span class=\"hljs-number\">03</span>   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">44969788</span>e-<span class=\"hljs-number\">03</span>   <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">75249639</span>e-<span class=\"hljs-number\">03</span>   <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">03630953</span>e-<span class=\"hljs-number\">04</span>\n   <span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">79601672</span>e-<span class=\"hljs-number\">04</span>   <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">14901696</span>e-<span class=\"hljs-number\">04</span>   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">41881013</span>e-<span class=\"hljs-number\">04</span>   <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">09531025</span>e-<span class=\"hljs-number\">04</span>\n   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">56379269</span>e-<span class=\"hljs-number\">05</span>   <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">73827562</span>e-<span class=\"hljs-number\">05</span>   <span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">12758539</span>e-<span class=\"hljs-number\">06</span>   <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00000000</span>e+<span class=\"hljs-number\">00</span>\n   <span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">56379269</span>e-<span class=\"hljs-number\">06</span>]\n</code></pre><p>We want the corresponding wind speed values to be the midpoint of each bin and 0 as the first value:</p>\n<pre><code class=\"lang-python\">X = np.append(<span class=\"hljs-number\">0</span>,bins[<span class=\"hljs-number\">1</span>:] - <span class=\"hljs-number\">2</span>)\nprint(X)\n</code></pre>\n<pre><code>[ <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">6</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">34</span> <span class=\"hljs-number\">38</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-number\">46</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">54</span> <span class=\"hljs-number\">58</span> <span class=\"hljs-number\">62</span> <span class=\"hljs-number\">66</span> <span class=\"hljs-number\">70</span> <span class=\"hljs-number\">74</span> <span class=\"hljs-number\">78</span>]\n</code></pre><pre><code class=\"lang-python\">plt.plot(X,Y,<span class=\"hljs-string\">'bo'</span>)\nplt.title(<span class=\"hljs-string\">'Wind Speed Distribution (km/h)'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-meta\">.text</span><span class=\"hljs-meta\">.Text</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x7f3d184bdba8</span>&gt;\n</code></pre><p><img src=\"output_24_1.png\" alt=\"png\"></p>\n<p>SciPy has a subpackage called <a href=\"http://docs.scipy.org/doc/scipy/reference/optimize.html\">scipy.optimize</a> which contains many methods for optimization and root finding. We will use the <a href=\"http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html#scipy.optimize.curve_fit\">curve_fit</a> method to fit the wind speed distribution to the Weibull distribution and so let&#39;s import the method:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> scipy.optimize <span class=\"hljs-keyword\">import</span> curve_fit\n</code></pre>\n<p>We can display the documentation for <code>curve_fit</code> in the notebook using <code>?</code>:</p>\n<pre><code class=\"lang-python\">curve_fit?\n</code></pre>\n<p>We have the arrays <code>X</code> and <code>Y</code> for the fit and so we just need to define a function for the Weibull distribution. Notice that the first variable is the independent variable $x$ and the following parameters are the coefficients in the Weibull distribution:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x,k,ell)</span>:</span>\n    <span class=\"hljs-string\">'''Weibull distribution with parameters k and ell'''</span>\n    <span class=\"hljs-keyword\">return</span> np.where(x &lt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.</span>, (k/ell)*(x/ell)**(k<span class=\"hljs-number\">-1</span>) * np.exp(-(x/ell)**k))\n</code></pre>\n<p>We&#39;ve used the NumPy function <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html\">numpy.where</a> to define a step function. Let&#39;s plot our function to make sure it corresponds with the <a href=\"https://en.wikipedia.org/wiki/Weibull_distribution\">definition</a>:</p>\n<pre><code class=\"lang-python\">plt.figure(figsize=(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">5</span>))\nx = np.linspace(<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">1000</span>)\nlabels = []\n<span class=\"hljs-keyword\">for</span> k,ell <span class=\"hljs-keyword\">in</span> [(<span class=\"hljs-number\">1.2</span>,<span class=\"hljs-number\">1</span>),(<span class=\"hljs-number\">1.4</span>,<span class=\"hljs-number\">2</span>),(<span class=\"hljs-number\">1.2</span>,<span class=\"hljs-number\">5</span>),(<span class=\"hljs-number\">1.4</span>,<span class=\"hljs-number\">5</span>)]:\n    y = f(x,k,ell)\n    plt.plot(x,y)\n    labels.append(<span class=\"hljs-string\">'$k = {0}$, $\\lambda = {1}$'</span>.format(k,ell))\n\nplt.title(<span class=\"hljs-string\">'Weibull Distribution'</span>)\nplt.ylim([<span class=\"hljs-number\">-0.2</span>,<span class=\"hljs-number\">0.8</span>])\nplt.legend(labels)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-selector-class\">.legend</span><span class=\"hljs-selector-class\">.Legend</span> at <span class=\"hljs-number\">0</span>x7f3d1811eb70&gt;\n</code></pre><p><img src=\"output_32_1.png\" alt=\"png\"></p>\n<p>Finally, we are ready to fit the data. According to <a href=\"http://wind-data.ch/tools/weibull.php?lng=en\">industry standards</a> we know the parameter $k$ should be between 1 and 2 and $\\lambda$ should be around the mean wind speed (~15 km/h in our case) therefore we can specify an intial guess for the curve fitting algorithm:</p>\n<pre><code class=\"lang-python\">params, _ = curve_fit(f,X,Y,p0=(<span class=\"hljs-number\">1.5</span>,<span class=\"hljs-number\">15</span>))\n</code></pre>\n<pre><code class=\"lang-python\">params\n</code></pre>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">array</span><span class=\"hljs-params\">([  <span class=\"hljs-number\">1.85706203</span>,  <span class=\"hljs-number\">15.02485969</span>])</span></span>\n</code></pre><pre><code class=\"lang-python\">x = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">1000</span>)\ny = f(x,params[<span class=\"hljs-number\">0</span>],params[<span class=\"hljs-number\">1</span>])\nplt.plot(x,y)\nplt.plot(X,Y,<span class=\"hljs-string\">'r.'</span>)\nplt.title(<span class=\"hljs-string\">'Wind Speed Distribution (km/h)'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-meta\">.text</span><span class=\"hljs-meta\">.Text</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x7f3d184fc048</span>&gt;\n</code></pre><p><img src=\"output_36_1.png\" alt=\"png\"></p>\n<p><strong>EXERCISE</strong></p>\n<p>Plot the squared error</p>\n<p>$$\n\\sum_{i=0}^{N} \\left( y_i - f(x_i,k,\\lambda) \\right)^2\n$$</p>\n<p>for a grid of values for $k$ and $\\lambda$.</p>\n<pre><code class=\"lang-python\">k1, k2 = (<span class=\"hljs-number\">1.8</span>,<span class=\"hljs-number\">1.9</span>)\nA1, A2 = (<span class=\"hljs-number\">14</span>,<span class=\"hljs-number\">16</span>)\nkvalues = np.linspace(k1,k2,<span class=\"hljs-number\">1000</span>)\nAvalues = np.linspace(A1,A2,<span class=\"hljs-number\">1000</span>)\nkvalues, Avalues = np.meshgrid(kvalues,Avalues)\nERR = np.sum([(f(X[i],kvalues,Avalues) - Y[i])**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,len(X))],axis=<span class=\"hljs-number\">0</span>)\nERR = ERR / ERR.max()\nplt.imshow(ERR,extent=[k1,k2,A1,A2],aspect=<span class=\"hljs-string\">'auto'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-selector-class\">.image</span><span class=\"hljs-selector-class\">.AxesImage</span> at <span class=\"hljs-number\">0</span>x7f3d17dd7470&gt;\n</code></pre><p><img src=\"output_38_1.png\" alt=\"png\"></p>\n<h3 id=\"2-a-tour-of-scikit-learn\">2. A tour of scikit-learn</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Machine_learning\">Machine learning</a> is a <em>very large</em> field study and so we won&#39;t (and can&#39;t) go through everything. Instead, we&#39;ll start off with examples notebooks written in-part by <a href=\"https://github.com/GaelVaroquaux\">Gael Varoquaux</a> for various introductory courses taught at SciPy conferences in the past few years.</p>\n<p>Before getting into these example notebooks\n, take a look at the <a href=\"http://scikit-learn.org/\">scikit-learn</a> documentation and especially the <a href=\"http://scikit-learn.org/stable/tutorial/basic/tutorial.html\">tutorial</a>.</p>\n<p>To get started, clone the <a href=\"https://github.com/GaelVaroquaux/sklearn_ensae_course\">GitHub repo</a>:</p>\n<pre><code class=\"lang-python\">! git clone https://github.com/GaelVaroquaux/sklearn_ensae_course.git\n</code></pre>\n<pre><code>Cloning into <span class=\"hljs-string\">'sklearn_ensae_course'</span>...\n<span class=\"hljs-string\">remote:</span> Counting <span class=\"hljs-string\">objects:</span> <span class=\"hljs-number\">903</span>, done.\u001b[K\n<span class=\"hljs-string\">remote:</span> Compressing <span class=\"hljs-string\">objects:</span> <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">311</span>/<span class=\"hljs-number\">311</span>), done.\u001b[K\n<span class=\"hljs-string\">remote:</span> Total <span class=\"hljs-number\">903</span> (delta <span class=\"hljs-number\">588</span>), reused <span class=\"hljs-number\">903</span> (delta <span class=\"hljs-number\">588</span>), pack-reused <span class=\"hljs-number\">0</span>\u001b[K\nReceiving <span class=\"hljs-string\">objects:</span> <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">903</span><span class=\"hljs-regexp\">/903), 16.50 MiB | 4.56 MiB/</span>s, done.\nResolving <span class=\"hljs-string\">deltas:</span> <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">588</span>/<span class=\"hljs-number\">588</span>), done.\nChecking connectivity... done.\n</code></pre><ol>\n<li>In the Jupyter main page, navigate to the directory <code>sklearn_ensae_course</code> that was cloned above.</li>\n<li>Go to the directory <code>notebooks</code> and start with <code>00_introduction_machine_learning_and_data.ipynb</code><ul>\n<li>You may get an error about the version of the Jupyter notebook -- click OK</li>\n<li>Follow the notebook and execute each cell as you go</li>\n<li>In the second code cell, you&#39;ll get an error: <code>No module named &#39;urllib2&#39;</code> and the error message points to an import in the file <code>sklearn_ensae_course/notebooks/figures/sdss_filters.py</code><ul>\n<li>Open the file <code>sklearn_ensae_course/notebooks/figures/sdss_filters.py</code> and replace <code>urllib2</code> with <code>requests</code> on lines 9, 30, and 47. (<code>requests</code> is the new HTTP package for Python 3.)</li>\n</ul>\n</li>\n<li>The second cell should work but now we get several warnings: <code>DeprecationWarning: Passing 1d arrays as data ...</code><ul>\n<li>Open the file <code>sklearn_ensae_course/notebooks/figures/sgd_separator.py</code> and edit line 25:<pre><code class=\"lang-python\">p = clf.decision_function(np.array([x1, x2]).reshape(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>))\n</code></pre>\n</li>\n<li>We need to restart the kernel since we changed something that was already imported into the notebook</li>\n<li>After restarting the kernel (and re-executing the first cell), the notebook should run smoothly ...</li>\n</ul>\n</li>\n<li>Be sure to change the values of <code>x_index</code> and <code>y_index</code> in the last cell to plot the different features of the dataset</li>\n</ul>\n</li>\n<li>Go to the directory <code>notebooks</code> and open <code>03_supervised_classification.ipynb</code><ul>\n<li>Follow the notebook and execute each cell as you</li>\n</ul>\n</li>\n</ol>\n","2016-08-24-notes":"<h1 id=\"ubc-scientific-software-seminar\">UBC Scientific Software Seminar</h1>\n<p><a href=\"http://mybinder.org:/repo/patrickwalls/ubc-scientific-software-seminar/notebooks/2016-08-24-notes.ipynb\"><img src=\"http://mybinder.org/badge.svg\" alt=\"Binder\"></a></p>\n<h2 id=\"august-24-2016\">August 24, 2016</h2>\n<p>Today&#39;s Agenda:</p>\n<p>A basic machine learning example:</p>\n<ul>\n<li>Digits dataset</li>\n<li>Our own <em>k</em>-nearest neighbors classifier</li>\n<li>Evaluating the classifier</li>\n<li>Implementing <code>sklearn.neighbors.KNeighborsClassifier</code></li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n%matplotlib inline\n</code></pre>\n<h3 id=\"digits-dataset\">Digits dataset</h3>\n<p>The <a href=\"http://scikit-learn.org/\">scikit-learn</a> package comes equipped with some toy <a href=\"http://scikit-learn.org/stable/modules/classes.html#module-sklearn.datasets\">datasets</a> to explore and, in this notebook, we&#39;ll look at the <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html\">digits dataset</a>. We import the <code>datasets</code> module and use the <code>load_digits</code> function to load the digits dataset. We can use <code>datasets.load_digits?</code> to consult the documentation to see what is returned.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> datasets\n</code></pre>\n<pre><code class=\"lang-python\">datasets.load_digits?\n</code></pre>\n<p>According to the documentation, the <code>load_digits</code> function returns a dictionary-like object which packages together several NumPy arrays and a description. To see what&#39;s available in the object, we can use the <code>.keys()</code> method:</p>\n<pre><code class=\"lang-python\">digits = datasets.load_digits()\n</code></pre>\n<pre><code class=\"lang-python\">digits.keys()\n</code></pre>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">dict_keys</span><span class=\"hljs-params\">([<span class=\"hljs-string\">'DESCR'</span>, <span class=\"hljs-string\">'target'</span>, <span class=\"hljs-string\">'target_names'</span>, <span class=\"hljs-string\">'data'</span>, <span class=\"hljs-string\">'images'</span>])</span></span>\n</code></pre><pre><code class=\"lang-python\">print(digits.DESCR)\n</code></pre>\n<pre><code>Optical Recognition of Handwritten Digits Data <span class=\"hljs-keyword\">Set</span>\n===================================================\n\nNotes\n<span class=\"hljs-comment\">-----</span>\n<span class=\"hljs-keyword\">Data</span> <span class=\"hljs-keyword\">Set</span> Characteristics:\n    :<span class=\"hljs-built_in\">Number</span> <span class=\"hljs-keyword\">of</span> Instances: <span class=\"hljs-number\">5620</span>\n    :<span class=\"hljs-built_in\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">Attributes</span>: <span class=\"hljs-number\">64</span>\n    :<span class=\"hljs-keyword\">Attribute</span> Information: <span class=\"hljs-number\">8</span>x8 image <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">integer</span> pixels <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-keyword\">range</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.16</span>.\n    :<span class=\"hljs-keyword\">Missing</span> <span class=\"hljs-keyword\">Attribute</span> <span class=\"hljs-keyword\">Values</span>: <span class=\"hljs-keyword\">None</span>\n    :Creator: E. Alpaydin (alpaydin <span class=\"hljs-string\">'@'</span> boun.edu.tr)\n    :<span class=\"hljs-built_in\">Date</span>: July; 1998\n\nThis is a copy of the test <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">of</span> the UCI ML hand-written digits datasets\n<span class=\"hljs-keyword\">http</span>://archive.ics.uci.edu/ml/datasets/Optical+Recognition+<span class=\"hljs-keyword\">of</span>+Handwritten+Digits\n\nThe <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">set</span> contains images <span class=\"hljs-keyword\">of</span> hand-written digits: <span class=\"hljs-number\">10</span> classes <span class=\"hljs-keyword\">where</span>\n<span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">class</span> refers <span class=\"hljs-keyword\">to</span> a digit.\n\nPreprocessing programs made available <span class=\"hljs-keyword\">by</span> NIST were used <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">extract</span>\nnormalized bitmaps <span class=\"hljs-keyword\">of</span> handwritten digits <span class=\"hljs-keyword\">from</span> a preprinted form. <span class=\"hljs-keyword\">From</span> a\ntotal <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">43</span> people, <span class=\"hljs-number\">30</span> contributed <span class=\"hljs-keyword\">to</span> the training <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">and</span> different <span class=\"hljs-number\">13</span>\n<span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">test</span> set. <span class=\"hljs-number\">32</span>x32 bitmaps <span class=\"hljs-keyword\">are</span> divided <span class=\"hljs-keyword\">into</span> nonoverlapping blocks <span class=\"hljs-keyword\">of</span>\n<span class=\"hljs-number\">4</span>x4 <span class=\"hljs-keyword\">and</span> the <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">on</span> pixels <span class=\"hljs-keyword\">are</span> <span class=\"hljs-keyword\">counted</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">each</span> block. This generates\nan <span class=\"hljs-keyword\">input</span> matrix <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">8</span>x8 <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">element</span> <span class=\"hljs-keyword\">is</span> an <span class=\"hljs-built_in\">integer</span> <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-keyword\">range</span>\n<span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.16</span>. This reduces dimensionality <span class=\"hljs-keyword\">and</span> gives invariance <span class=\"hljs-keyword\">to</span> small\ndistortions.\n\n<span class=\"hljs-keyword\">For</span> info <span class=\"hljs-keyword\">on</span> NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\nT. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, <span class=\"hljs-keyword\">and</span> C.\nL. Wilson, NIST <span class=\"hljs-keyword\">Form</span>-Based Handprint Recognition <span class=\"hljs-keyword\">System</span>, NISTIR <span class=\"hljs-number\">5469</span>,\n<span class=\"hljs-number\">1994.</span>\n\n<span class=\"hljs-keyword\">References</span>\n<span class=\"hljs-comment\">----------</span>\n  - C. Kaynak (<span class=\"hljs-number\">1995</span>) Methods <span class=\"hljs-keyword\">of</span> Combining Multiple Classifiers <span class=\"hljs-keyword\">and</span> Their\n    Applications <span class=\"hljs-keyword\">to</span> Handwritten Digit Recognition, MSc Thesis, Institute <span class=\"hljs-keyword\">of</span>\n    Graduate Studies <span class=\"hljs-keyword\">in</span> Science <span class=\"hljs-keyword\">and</span> Engineering, Bogazici University.\n  - E. Alpaydin, C. Kaynak (<span class=\"hljs-number\">1998</span>) Cascading Classifiers, Kybernetika.\n  - Ken Tang <span class=\"hljs-keyword\">and</span> Ponnuthurai N. Suganthan <span class=\"hljs-keyword\">and</span> Xi Yao <span class=\"hljs-keyword\">and</span> A. Kai Qin.\n    Linear dimensionalityreduction <span class=\"hljs-keyword\">using</span> relevance weighted LDA. School <span class=\"hljs-keyword\">of</span>\n    Electrical <span class=\"hljs-keyword\">and</span> Electronic Engineering Nanyang Technological University.\n    <span class=\"hljs-number\">2005.</span>\n  - Claudio Gentile. A <span class=\"hljs-keyword\">New</span> Approximate Maximal Margin Classification\n    Algorithm. NIPS. <span class=\"hljs-number\">2000.</span>\n</code></pre><p>Let&#39;s look at the various arrays in the digits object. First, the <strong>data array</strong> is a 2D array where each row is a sample corresponding to a hand-written digit. We see that there are 1797 samples in the dataset each consisting of a 1D array of length 64 (representing an 8 by 8 pixel image).</p>\n<pre><code class=\"lang-python\">type(digits.data)\n</code></pre>\n<pre><code><span class=\"hljs-selector-tag\">numpy</span><span class=\"hljs-selector-class\">.ndarray</span>\n</code></pre><pre><code class=\"lang-python\">digits.data.shape\n</code></pre>\n<pre><code>(<span class=\"hljs-number\">1797</span>, <span class=\"hljs-number\">64</span>)\n</code></pre><pre><code class=\"lang-python\">digits.data[<span class=\"hljs-number\">0</span>,:]\n</code></pre>\n<pre><code>array([  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">13.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">1.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">13.</span>,\n        <span class=\"hljs-number\">15.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">3.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">2.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">11.</span>,\n         <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,\n         <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">11.</span>,   <span class=\"hljs-number\">0.</span>,\n         <span class=\"hljs-number\">1.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">7.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">2.</span>,  <span class=\"hljs-number\">14.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,\n         <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">6.</span>,  <span class=\"hljs-number\">13.</span>,  <span class=\"hljs-number\">10.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>])\n</code></pre><p>The <strong>target array</strong> contains the label for each sample in data. We can see that the first sample is the digit 0.</p>\n<pre><code class=\"lang-python\">digits.target.shape\n</code></pre>\n<pre><code>(<span class=\"hljs-name\">1797</span>,)\n</code></pre><pre><code class=\"lang-python\">digits.target[<span class=\"hljs-number\">0</span>]\n</code></pre>\n<pre><code><span class=\"hljs-number\">0</span>\n</code></pre><p>The <strong>images array</strong> is a 3D array which contains the same data as the data array but each sample is reshaped into a 8 by 8 array representing an 8 by 8 pixel image. In other words, the image array is simply a convenience so that we don&#39;t have to reshape the samples in the data array when we want to view the image.</p>\n<pre><code class=\"lang-python\">digits.images.shape\n</code></pre>\n<pre><code>(<span class=\"hljs-number\">1797</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>)\n</code></pre><pre><code class=\"lang-python\">digits.images[<span class=\"hljs-number\">0</span>,:,:]\n</code></pre>\n<pre><code>array([[  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">13.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">1.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">13.</span>,  <span class=\"hljs-number\">15.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">3.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">2.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">11.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">11.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">1.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">7.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">2.</span>,  <span class=\"hljs-number\">14.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">6.</span>,  <span class=\"hljs-number\">13.</span>,  <span class=\"hljs-number\">10.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>]])\n</code></pre><pre><code class=\"lang-python\">digits.data[<span class=\"hljs-number\">0</span>,:].reshape(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>)\n</code></pre>\n<pre><code>array([[  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">13.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">1.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">13.</span>,  <span class=\"hljs-number\">15.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">3.</span>,  <span class=\"hljs-number\">15.</span>,   <span class=\"hljs-number\">2.</span>,   <span class=\"hljs-number\">0.</span>,  <span class=\"hljs-number\">11.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">5.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">9.</span>,   <span class=\"hljs-number\">8.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">4.</span>,  <span class=\"hljs-number\">11.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">1.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">7.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">2.</span>,  <span class=\"hljs-number\">14.</span>,   <span class=\"hljs-number\">5.</span>,  <span class=\"hljs-number\">10.</span>,  <span class=\"hljs-number\">12.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>],\n       [  <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">6.</span>,  <span class=\"hljs-number\">13.</span>,  <span class=\"hljs-number\">10.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>,   <span class=\"hljs-number\">0.</span>]])\n</code></pre><pre><code class=\"lang-python\">plt.imshow(digits.images[<span class=\"hljs-number\">0</span>,:,:],cmap=<span class=\"hljs-string\">'binary'</span>)\n</code></pre>\n<pre><code>&lt;matplotlib<span class=\"hljs-selector-class\">.image</span><span class=\"hljs-selector-class\">.AxesImage</span> at <span class=\"hljs-number\">0</span>x7f07d4c2ec50&gt;\n</code></pre><p><img src=\"output_20_1.png\" alt=\"png\"></p>\n<p>The <strong>target_names array</strong> is simply the complete list of labels for the samples:</p>\n<pre><code class=\"lang-python\">digits.target_names\n</code></pre>\n<pre><code>array([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>])\n</code></pre><p><strong>Exercise.</strong> Plot a 4 by 4 grid of randomly selected images from the dataset to get a sense of what the digits look like:</p>\n<pre><code class=\"lang-python\">indices = np.random.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1797</span>,<span class=\"hljs-number\">16</span>) <span class=\"hljs-comment\"># Create an array of 16 random integers chosen from the interval [0,1797]</span>\n\nplt.figure(figsize=(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>))\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">16</span>):\n    plt.subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>,i+<span class=\"hljs-number\">1</span>)\n    plt.imshow(digits.images[indices[i]],cmap=<span class=\"hljs-string\">'binary'</span>)\n    plt.title(<span class=\"hljs-string\">'Digit = {}'</span>.format(digits.target[indices[i]]))\n    plt.axis(<span class=\"hljs-string\">'off'</span>)\n\nplt.tight_layout()\n</code></pre>\n<p><img src=\"output_24_0.png\" alt=\"png\"></p>\n<h3 id=\"split-the-dataset-into-a-training-set-and-a-testing-set\">Split the dataset into a training set and a testing set</h3>\n<p>It&#39;s very important <strong>not</strong> to use the same data for constructing <em>and</em> testing your models for obvious reasons. It&#39;s <a href=\"http://scikit-learn.org/stable/tutorial/basic/tutorial.html\">standard practice</a> to split your dataset into a training set and a testing set.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># N is arbitrarily chosen to be the size of the training dataset</span>\n<span class=\"hljs-comment\"># (it may be better to take random sample of the dataset instead of the first N samples)</span>\nN = <span class=\"hljs-number\">1200</span>\n\ndata_train = digits.data[:N,:]\ntarget_train = digits.target[:N]\n\ndata_test = digits.data[N:,:]\ntarget_test = digits.target[N:]\n</code></pre>\n<h3 id=\"building-our-own-k-nearest-neighbors-classifier\">Building our own <em>k</em>-nearest neighbors classifier</h3>\n<p><a href=\"http://scikit-learn.org/stable/modules/neighbors.html\">Nearest neighbors</a> refers to a family of classification and regression algorithms based on a simple principle: &quot;find a predefined number of training samples closest in distance to the new point, and predict the label from these&quot;.</p>\n<p>Since the idea is simple enough, let&#39;s build our own classifier before we begin using sklearn implementations.</p>\n<h4 id=\"attempt-1-build-the-classifier-as-a-function\">Attempt 1: Build the classifier as a function</h4>\n<p>Write a function which takes the following parameters:</p>\n<ul>\n<li><code>sample</code> - array of length 64 with values in the interval [0,16] (represnting an 8 by 8 pixel image of a digit)</li>\n<li><code>data</code> - array of samples of digits (as a 2D array of size (n samples) by 64)</li>\n<li><code>target</code> - array of labels for the samples in data</li>\n<li><code>k</code> - number of nearest neighbors to find</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">knn_predict</span><span class=\"hljs-params\">(sample,data,target,k=<span class=\"hljs-number\">1</span>,output=False)</span>:</span>\n    <span class=\"hljs-string\">'''Predict digit label of sample using KNN with training samples in data with labels target.'''</span>\n\n    distances = np.linalg.norm(sample - data, axis=<span class=\"hljs-number\">1</span>)\n    sorted_distances = np.sort(distances)\n    threshold = sorted_distances[k - <span class=\"hljs-number\">1</span>]\n    neighbors = target[distances &lt;= threshold]\n    prediction = np.bincount(neighbors).argmax()\n\n    <span class=\"hljs-keyword\">if</span> output:\n        plt.imshow(sample.reshape(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>),cmap=<span class=\"hljs-string\">'binary'</span>)\n        plt.title(<span class=\"hljs-string\">'Sample Image'</span>)\n        plt.axis(<span class=\"hljs-string\">'off'</span>)\n        plt.show()\n\n        print(k,<span class=\"hljs-string\">'nearest neighbors are:'</span>,neighbors)\n\n        print(<span class=\"hljs-string\">'\\nKNN predicts:'</span>,prediction)\n\n    <span class=\"hljs-keyword\">return</span> prediction\n</code></pre>\n<pre><code class=\"lang-python\">i = np.random.randint(<span class=\"hljs-number\">0</span>,len(data_test)) <span class=\"hljs-comment\"># Choose a random index in the test data</span>\nknn_predict(data_test[i,:],data_train,target_train,k=<span class=\"hljs-number\">7</span>,output=<span class=\"hljs-keyword\">True</span>)\nprint(<span class=\"hljs-string\">'\\nDigit is:'</span>,target_test[i])\n</code></pre>\n<p><img src=\"output_29_0.png\" alt=\"png\"></p>\n<pre><code><span class=\"hljs-number\">7</span> nearest neighbors <span class=\"hljs-string\">are:</span> [<span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span>]\n\nKNN <span class=\"hljs-string\">predicts:</span> <span class=\"hljs-number\">9</span>\n\nDigit <span class=\"hljs-string\">is:</span> <span class=\"hljs-number\">9</span>\n</code></pre><h4 id=\"attempt-2-build-the-classifier-as-an-object\">Attempt 2: Build the classifier as an object</h4>\n<p>Write a class which produces objects with:</p>\n<p>Attributes:</p>\n<ul>\n<li><code>data</code> - array of training samples of digits (as a 2D array of size (n samples) by 64)</li>\n<li><code>target</code> - array of training labels for the samples in data</li>\n<li><code>k</code> - number of neighbors in KNN algorithm</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><code>__init__</code> - instantiates an object</li>\n<li><code>fit</code> - creates a model ready for prediction</li>\n<li><code>predict</code> - takes an sample (as an array of length 64) and predicts the digit based on the KNN model</li>\n<li><code>score</code> - takes arrays of images and labels and returns the accuracy of the model</li>\n</ul>\n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KNN</span><span class=\"hljs-params\">()</span>:</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self,k=<span class=\"hljs-number\">10</span>)</span>:</span>\n        self.k = k\n        print(<span class=\"hljs-string\">'Creating KNN classifier object with k = {} ...'</span>.format(self.k))\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span><span class=\"hljs-params\">(self,data_train,target_train)</span>:</span>\n        self.data = data_train\n        self.target = target_train\n        print(<span class=\"hljs-string\">'Fitting the model with'</span>,self.data.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-string\">'training samples ...'</span>)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">predict</span><span class=\"hljs-params\">(self,sample,output=False)</span>:</span>\n        distances = np.linalg.norm(sample - self.data, axis=<span class=\"hljs-number\">1</span>)\n        sorted_distances = np.sort(distances)\n        threshold = sorted_distances[self.k - <span class=\"hljs-number\">1</span>]\n        neighbors = self.target[distances &lt;= threshold]\n        prediction = np.bincount(neighbors).argmax()\n\n        <span class=\"hljs-keyword\">if</span> output:\n            plt.imshow(sample.reshape(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>),cmap=<span class=\"hljs-string\">'binary'</span>)\n            plt.title(<span class=\"hljs-string\">'Sample Image'</span>)\n            plt.axis(<span class=\"hljs-string\">'off'</span>)\n            plt.show()\n            print(self.k,<span class=\"hljs-string\">'nearest neighbors are:'</span>,neighbors)\n            print(<span class=\"hljs-string\">'\\nKNN predicts:'</span>,prediction)\n\n        <span class=\"hljs-keyword\">return</span> prediction\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">score</span><span class=\"hljs-params\">(self,test_data,test_target)</span>:</span>\n        n_samples = test_data.shape[<span class=\"hljs-number\">0</span>]\n        predictions = np.array([])\n        <span class=\"hljs-keyword\">for</span> image <span class=\"hljs-keyword\">in</span> test_data:\n            prediction = self.predict(image)\n            predictions = np.append(predictions,prediction)\n\n        correct = predictions[predictions == test_target]\n        accuracy = len(correct) / n_samples\n        <span class=\"hljs-keyword\">return</span> accuracy\n</code></pre>\n<pre><code class=\"lang-python\">clf = KNN(k=<span class=\"hljs-number\">7</span>)\nclf.fit(data_train,target_train)\n</code></pre>\n<pre><code><span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">7</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n</code></pre><pre><code class=\"lang-python\">i = np.random.randint(<span class=\"hljs-number\">0</span>,len(data_test)) <span class=\"hljs-comment\"># Choose a random index in the test data</span>\nclf.predict(data_test[i,:],output=<span class=\"hljs-keyword\">True</span>)\nprint(<span class=\"hljs-string\">'\\nDigit is:'</span>,target_test[i])\n</code></pre>\n<p><img src=\"output_33_0.png\" alt=\"png\"></p>\n<pre><code><span class=\"hljs-number\">7</span> nearest neighbors <span class=\"hljs-string\">are:</span> [<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>]\n\nKNN <span class=\"hljs-string\">predicts:</span> <span class=\"hljs-number\">2</span>\n\nDigit <span class=\"hljs-string\">is:</span> <span class=\"hljs-number\">2</span>\n</code></pre><pre><code class=\"lang-python\">v0 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv1 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv2 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv3 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv4 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv5 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv6 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv7 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n\nclf.k = <span class=\"hljs-number\">20</span>\nimage = np.array([v0,v1,v2,v3,v4,v5,v6,v7]).reshape(<span class=\"hljs-number\">64</span>,)\nclf.predict(image,output=<span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p><img src=\"output_34_0.png\" alt=\"png\"></p>\n<pre><code>20 nearest neighbors are: [8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 3 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8<span class=\"hljs-number\"> 8 </span>8 8]\n\nKNN predicts: 8\n\n\n\n\n\n8\n</code></pre><h3 id=\"evaluating-the-model\">Evaluating the model</h3>\n<p>Recall that we split the dataset in two parts: a training set and a testing set. The idea is that we want to evaluate the accuracy of our model but <strong>we can&#39;t test the model on the data we used to train the model</strong> and so we use the testing set to evaluate the accuracy of the model.</p>\n<pre><code class=\"lang-python\">clf = KNN(k=<span class=\"hljs-number\">7</span>)\nclf.fit(data_train,target_train)\n</code></pre>\n<pre><code><span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">7</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n</code></pre><pre><code class=\"lang-python\">clf.score(data_test,target_test)\n</code></pre>\n<pre><code>0<span class=\"hljs-selector-class\">.9631490787269682</span>\n</code></pre><pre><code class=\"lang-python\"><span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">21</span>):\n    clf = KNN(k=k);\n    clf.fit(data_train,target_train);\n    print(<span class=\"hljs-string\">'For k ='</span>,k,<span class=\"hljs-string\">' accuracy is'</span>,clf.score(data_test,target_test))\n</code></pre>\n<pre><code><span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">1</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">1</span>  accuracy is <span class=\"hljs-number\">0.964824120603015</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">2</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">2</span>  accuracy is <span class=\"hljs-number\">0.9681742043551089</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">3</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">3</span>  accuracy is <span class=\"hljs-number\">0.9698492462311558</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">4</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">4</span>  accuracy is <span class=\"hljs-number\">0.964824120603015</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">5</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">5</span>  accuracy is <span class=\"hljs-number\">0.964824120603015</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">6</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">6</span>  accuracy is <span class=\"hljs-number\">0.9614740368509213</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">7</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">7</span>  accuracy is <span class=\"hljs-number\">0.9631490787269682</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">8</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">8</span>  accuracy is <span class=\"hljs-number\">0.9597989949748744</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">9</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">9</span>  accuracy is <span class=\"hljs-number\">0.9614740368509213</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">10</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">10</span>  accuracy is <span class=\"hljs-number\">0.9581239530988275</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">11</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">11</span>  accuracy is <span class=\"hljs-number\">0.9547738693467337</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">12</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">12</span>  accuracy is <span class=\"hljs-number\">0.9530988274706867</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">13</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">13</span>  accuracy is <span class=\"hljs-number\">0.9530988274706867</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">14</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">14</span>  accuracy is <span class=\"hljs-number\">0.9530988274706867</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">15</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">15</span>  accuracy is <span class=\"hljs-number\">0.9547738693467337</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">16</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">16</span>  accuracy is <span class=\"hljs-number\">0.9514237855946399</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">17</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">17</span>  accuracy is <span class=\"hljs-number\">0.9514237855946399</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">18</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">18</span>  accuracy is <span class=\"hljs-number\">0.9547738693467337</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">19</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">19</span>  accuracy is <span class=\"hljs-number\">0.9547738693467337</span>\n<span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">20</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">20</span>  accuracy is <span class=\"hljs-number\">0.9530988274706867</span>\n</code></pre><p>It seems that <code>k = 3</code> produces the best results with 96.48% accuracy:</p>\n<pre><code><span class=\"hljs-type\">Creating</span> <span class=\"hljs-type\">KNN</span> classifier <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">k</span> </span>= <span class=\"hljs-number\">3</span> ...\n<span class=\"hljs-type\">Fitting</span> the model <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">1200</span> training samples ...\n<span class=\"hljs-type\">For</span> k = <span class=\"hljs-number\">3</span>  accuracy is <span class=\"hljs-number\">0.9698492462311558</span>\n</code></pre><p>Let&#39;s use k = 3 on some digits created manually:</p>\n<pre><code class=\"lang-python\">v0 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv1 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv2 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv3 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv4 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv5 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv6 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\nv7 = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n\nclf.k = <span class=\"hljs-number\">3</span>\nimage = np.array([v0,v1,v2,v3,v4,v5,v6,v7]).reshape(<span class=\"hljs-number\">64</span>,)\nclf.predict(image,output=<span class=\"hljs-keyword\">True</span>)\n</code></pre>\n<p><img src=\"output_41_0.png\" alt=\"png\"></p>\n<pre><code><span class=\"hljs-number\">3</span> nearest neighbors <span class=\"hljs-string\">are:</span> [<span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">9</span>]\n\nKNN <span class=\"hljs-string\">predicts:</span> <span class=\"hljs-number\">9</span>\n\n\n\n\n\n<span class=\"hljs-number\">9</span>\n</code></pre><h3 id=\"implementing-sklearn-neighbors-kneighborsclassifier-\">Implementing <code>sklearn.neighbors.KNeighborsClassifier</code></h3>\n<p>See the <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">documentation</a> for a description of the <em>k</em>-nearest neighbors class and its attributes and methods.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> sklearn.neighbors <span class=\"hljs-keyword\">import</span> KNeighborsClassifier <span class=\"hljs-keyword\">as</span> KNC\n</code></pre>\n<pre><code class=\"lang-python\">clf = KNC(n_neighbors=<span class=\"hljs-number\">3</span>)\n</code></pre>\n<pre><code class=\"lang-python\">clf.fit(data_train,target_train)\n</code></pre>\n<pre><code>KNeighborsClassifier(<span class=\"hljs-attr\">algorithm='auto',</span> <span class=\"hljs-attr\">leaf_size=30,</span> <span class=\"hljs-attr\">metric='minkowski',</span>\n           <span class=\"hljs-attr\">metric_params=None,</span> <span class=\"hljs-attr\">n_jobs=1,</span> <span class=\"hljs-attr\">n_neighbors=3,</span> <span class=\"hljs-attr\">p=2,</span>\n           <span class=\"hljs-attr\">weights='uniform')</span>\n</code></pre><pre><code class=\"lang-python\">i = np.random.randint(<span class=\"hljs-number\">0</span>,len(data_test)) <span class=\"hljs-comment\"># Choose a random index in the test data</span>\nplt.imshow(data_test[i].reshape(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>),cmap=<span class=\"hljs-string\">'binary'</span>)\nplt.show()\nprediction = clf.predict(data_test[i].reshape(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">64</span>)) <span class=\"hljs-comment\"># All sklearn models expect a 2D array input to the predict method</span>\nprint(<span class=\"hljs-string\">'Classifier predicts:'</span>,prediction[<span class=\"hljs-number\">0</span>])\nprint(<span class=\"hljs-string\">'Digit is:'</span>,target_test[i])\n</code></pre>\n<p><img src=\"output_46_0.png\" alt=\"png\"></p>\n<pre><code>Classifier <span class=\"hljs-string\">predicts:</span> <span class=\"hljs-number\">1</span>\nDigit <span class=\"hljs-string\">is:</span> <span class=\"hljs-number\">1</span>\n</code></pre><pre><code class=\"lang-python\">clf.score(data_test,target_test)\n</code></pre>\n<pre><code>0<span class=\"hljs-selector-class\">.96984924623115576</span>\n</code></pre>"}})
  
  app.start('#choo-root')
  